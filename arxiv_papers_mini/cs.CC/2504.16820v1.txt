Symmetric Proofs in the Ideal Proof System
Anuj Dawar /envel⌢pe
Department of Computer Science and Technology, University of Cambridge, UK
Erich Grädel /envel⌢pe
Mathematical Foundations of Computer Science, RWTH Aachen University, Germany
Leon Kullmann /envel⌢pe
RWTH Aachen University, Germany
Benedikt Pago /envel⌢pe
Department of Computer Science and Technology, University of Cambridge, UK
Abstract
We consider the Ideal Proof System (IPS) introduced by Grochow and Pitassi and pose the question
of which tautologies admit symmetric proofs, and of what complexity. The symmetry requirement
in proofs is inspired by recent work establishing lower bounds in other symmetric models of
computation. We link the existence of symmetric IPS proofs to the expressive power of logics such
as fixed-point logic with counting and Choiceless Polynomial Time, specifically regarding the graph
isomorphism problem. We identify relationships and tradeoffs between the symmetry of proofs and
other parameters of IPS proofs such as size, degree and linearity. We study these on a number of
standard families of tautologies from proof complexity and finite model theory such as the pigeonhole
principle, the subset sum problem and the Cai-Fürer-Immerman graphs, exhibiting non-trivial upper
bounds on the size of symmetric IPS proofs.
2012 ACM Subject Classification Theory of computation →Proof complexity; Theory of computa-
tion→Finite Model Theory
Keywords and phrases proof complexity, algebraic complexity, descriptive complexity, symmetric
circuits, graph isomorphism
Digital Object Identifier 10.4230/LIPIcs...
1 Introduction
A central project within the subject of proof complexity [ 2,32,24] is to define ever more
powerful proof systems for propositional logic for which it is possible to establish super-
polyonomial lower bounds on the size of proofs. The Ideal Proof System (IPS), introduced
by Grochow and Pitassi in [ 20], is a powerful algebraic proof system that subsumes many
previous algebraic and propositional proof systems such as the polynomial calculus and Frege
proof systems. No superpolynomial lower bounds are known for the unrestricted IPS and
it has been shown, for instance, that it efficiently simulates powerful proof systems such as
extended Frege, for which such lower bounds are a long-standing open problem. On the
other hand, lower bounds have been shown for interesting restrictions of IPS.
In IPS, like other algebraic proof systems, propositional formulas are coded as polynomial
equations and a proof (or refutation) is a certificate showing that a given equation system has
no solution. Equivalently, the certificate shows that the input polynomials, or axioms, have
no common zero. In IPS, the certificate is an algebraic circuit which witnesses that the unit
polynomial 1is in the ideal generated by the axioms, and we measure the complexity of the
certificate in terms of the size of the circuit. Here, an algebraic circuit is a representation of a
polynomial as a circuit with constants and variables as inputs and addition and multiplication
gates. In order to make progress on showing lower bounds for IPS, it has been suggested [ 20]
to study fragments of IPS given by restrictions on the circuits considered. A successful
recent line of work has established super-polynomial lower bounds for fragments such as
©Anuj Dawar, Erich Grädel, Leon Kullmann, Benedikt Pago;
licensed under Creative Commons License CC-BY 4.0
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, GermanyarXiv:2504.16820v1  [cs.LO]  23 Apr 2025
XX:2
bounded-depth circuits, multilinear formulas and so-called read-once oblivious algebraic
branching programs (roABPs) [ 16,25,17,22]. The common method behind these results
has been named the functional lower bound technique.
In the present paper, we consider a natural restriction on IPS proofs based on symmetric
circuits. Non-trivial lower bounds for symmetric algebraic circuits have recently been
established [ 14,15,12] and this raises the question of whether, when the input polynomials
have natural symmetries, the corresponding proof can also be made symmetric. Or, perhaps
more interestingly, whether the lower bound methods for symmetric algebraic circuits can be
combined with functional lower bound techniques to obtain lower bounds for symmetric IPS
proofs.
The present paper lays the foundations for this. We formalise the symmetry requirement
in IPS proofs and show that our definition is sound in the sense that restricting to symmetric
proofs still yields a complete proof system. Beyond this, our work has two main contributions.
First, we show how the study of symmetric IPS fits into the context of a larger project that
investigates the role of symmetry in lower bounds in a number of areas of complexity theory
(see [9]). This project is centred around the concept of symmetric computation in the sense
of symmetric circuits and logics from finite model theory [ 10,11]. Specifically, it seeks to
lift game-based methods from finite model theory which are used to show inexpressiveness
results in logic to lower bounds in other models of computing. There is a well-established
connection between the expressive power of such logics and propositional proof complexity. In
particular, it has been shown that, by encoding propositional axioms as relational structures
in a suitable way, the problem of the existence of a resolution refutation of a given width, or
of a polynomial calculus refutation of a fixed degree are expressible in existential fixed-point
logic and fixed-point logic with counting (FPC) respectively and are indeed complete for these
logics under weak, symmetry-preserving reductions [ 29]. Hence, in a precise sense these logics
exactly characterise the power of the corresponding proof systems and from lower bounds on
the expressive power of the logics we can extract lower bounds in proof complexity. Moreover,
the stronger logic Choiceless Polynomial Time (CPT) can, in a symmetry-preserving way,
be simulated in the bounded-degree extended polynomial calculus [ 27]. CPT is of great
importance in descriptive complexity as a candidate logic for capturing PTIME [28, 18].
As the results we show in Section 5 establish, symmetric IPS proofs offer a suitable
unifying formalism in which the results from [ 29,27] can be recast. The expressive power
of FPC corresponds to the bounded-degree symmetric IPS proofs, and the stronger logic
CPT can only be simulated by symmetric IPS proofs of unbounded degree. Importantly, the
symmetries of the IPS proofs we consider are the inherent symmetries of the input structure,
which are the symmetries under which the corresponding FPC or CPT computation is
invariant.
The second focus of this paper is upper bounds for the size of symmetric IPS refutations
of various families of instances that possess natural symmetries. One example, where upper
(and lower) bounds actually follow from results in finite model theory, is a formulation of the
graph isomorphism problem as a system of polynomial equations [ 3] over Q. The equations
expressing that two graphs GandHare isomorphic are symmetric under the automorphism
groups ofGandH. We show that the complexity of symmetric IPS refutations with these
symmetry groups matches the descriptive complexity of distinguishing GandH: Graphs that
are distinguishable in FPC, or equivalently by the k-dimensional Weisfeiler-Leman algorithm
[23] for fixedk, admit bounded-degree polynomial-size symmetric IPS refutations. Graphs
that are distinguishable in the stronger logic CPT, but not in FPC, admit polynomial-size
symmetric IPS refutations, but not of bounded degree. This separates in particular the
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:3
bounded-degree fragment of symmetric IPS from its unbounded-degree version (Theorem
13).
A related family of instances we consider is a system of linear equations over the finite
fieldF2that expresses the isomorphism problem on Cai-Fürer-Immerman (CFI) graphs [ 6,1]
which is known to be inexpressible in FPC. Even though the instances exhibit a large number
of interesting symmetries and are the core of numerous finite model theory lower bounds, it
turns out quite surprisingly that they do admit polynomial-size symmetric IPS refutations.
However, we are not able to exhibit a linearsymmetric IPS refutation of the CFI equations
of less than exponential size, making them a candidate for separating the linear fragment
from the full symmetric IPS. Here the linear (or Hilbert-like ) fragment is as defined in [ 20]
(see also Section 3.2).
Besides the CFI equations, we consider standard hard examples from proof complexity,
namely the pigeonhole principle (PHP) and the subset sum problem. The former is the
classic tautology asserting that there is no injective function from a set of n+ 1elements
to a set of nelements. The latter is simply the equation/summationtextn
i=1xi−β= 0, together with
the equations x2
i−xi= 0for alli, enforcing{0,1}-solution. This is unsatisfiable when
β >n. The pigeonhole principle has been used to obtain lower bounds for bounded-width
resolution [ 21] and bounded-degree polynomial calculus [ 30]. This is again a promising
candidate for showing lower bounds on the size of symmetric IPS proofs as the tautologies
are rich in symmetries and we know of no sub-exponential size symmetric IPS refutations for
PHP.
In contrast, for subset sum, we do obtain polynomial size symmetric IPS refutations,
which is significant because subset sum and its variations are the key instances where the
functional lower bound method [ 16,17,22] has been used successfully. Thus, symmetry alone
is a limitation of a rather different nature than others, e.g. multilinear-formula or roABP-IPS
where functional lower bounds have been established.
Our upper bounds on proof sizes are summarised in the table below. In this table, the
entry “none” indicates that no proofs with the given restrictions exist, and cis a fixed
constant. Our upper bounds for the graph isomorphism problem depend on the graphs:
We consider graphs that are distinguishable by the k-dimensional Weisfeiler Leman (WL)
algorithm versus graphs that are distinguished by CPT; the latter distinguishes strictly more
graphs [13].
FPC-definable
problemsGraph
isomorphismCFISubset sumPigeonhole
principle
degk-sym-IPS O(nc)O(nc)ifk-WL-
distinguishablenone none none
sym-IPSLINO(nc)O(nc)if CPT-
distinguishableO(2n)O(nc)O(3n·n)
sym-IPS O(nc)O(nc)if CPT-
distinguishableO(nc)O(nc)O(3n·n)
Acknowledgments
We are grateful to Iddo Tzameret for familiarising us with the current trends in IPS lower
bounds and for valuable suggestions for future directions of this project.
XX:4
2 Preliminaries
We denote by [n]the set{1,...,n}. We call a set X, with the action of a group Γon it a
Γ-set. The action of ΓonXhas anatural extension to a number of other sets defined from
X. In particular, the following are Γ-sets:Xkfor anyk∈N; the setAXof functions from X
to any setA; and the collection F[X]of polynomials over Xwith coefficients from a field F.
IfXis aΓ-set andp∈F[X]a polynomial, then we say that pisΓ-symmetric orΓ-
invariant ifπ(p) =pfor everyπ∈Γ. A set of polynomials F ⊆F[X]isΓ-invariant if
{π(f)|f∈F} =Ffor everyπ∈Γ. We write Sym (X)for thesymmetric group onXand
for a finite relational structure Awe write Aut(A)for theautomorphism group ofA.
In what follows, Xdenotes a finite set of variables, Fdenotes a field, and F[X]is the
correspondingringofpolynomialsinthevariables X. Instancesforthealgebraicproofsystems
we consider are systems of polynomial equations . A system of polynomial equations is a finite
setF⊆F[X], and asolution forFis an assignment s:X→Fsuch thatf(s(⃗ x)) = 0for
eachf(⃗ x)∈F. We say thatFis satisfiable if it has a solution, and unsatisfiable otherwise.
If we wish to encode Boolean satisfiability problems, where the assignments are in {0,1}
only, then we include in FtheBoolean axioms x2−xfor eachx∈X.
For a system of polynomial equations F, thedegree deg(F)ofFis the maximum degree
of any polynomial in F. Thesize|F|ofFis the total number of variables and equations, i.e.
ifF={fj∈F[X]|1≤j≤m}, then|F|:=m+|X|.
2.1 (Symmetric) Algebraic Circuits
We study the complexity of a polynomial not only in terms of its degree or its number of
monomials but also via the size of the smallest algebraic circuit representing it.
▶Definition 1 (Algebraic circuit) .An algebraic circuit over variables Xand a field Fis a
connected directed acyclic graph C= (D,W )with a labelling λ:D→{+,×}∪X∪Fsuch
thatλ(g)∈X∪Fifghas in-degree 0, andλ(g)∈{+,×}, otherwise.
The nodes in Dare called gatesand the edges in Ware called wires. Gates with in-degree
0are called input gates and gates with out-degree 0are called output gates . Unless stated
otherwise, there is only one output gate. Every gate that is not an input gate is an internal
gate. Thesize of a circuit Cis|C|:=|D(C)|.
We view an algebraic circuit CoverXandFas computing a polynomial C(⃗ x)∈F[X]by
evaluating gates to polynomials and treating +,×as ring operations. We write Cfor the
circuit and C(⃗ x)for the polynomial it computes. For a gate g∈D, we denote by Cg(⃗ x)the
polynomial computed by the subcircuit rooted in g.
Thesemantic degree of an algebraic circuit is the maximum degree of a polynomial
computed by any of its subcircuits: deg(C) := max({deg(Cg(⃗ x))|g∈D}).
We are mostly concerned with symmetric algebraic circuits, as they are studied for
example in [ 14]. If Γis a group acting on a variable set X, then a circuit CoverXis
Γ-symmetric if we can extend the action of Γon the input gates to automorphisms of the
whole circuit. An automorphism of a circuit is a permutation of the gates that preserves its
structure as a DAG, as well as all labels. Formally, π∈Γextendsto an automorphism of
C= (D,W )if there is a σ∈Sym (D)such thatσis an automorphism of the DAG Cthat
preserves labels of internal gates, and for every input gate g∈Dwith labelλ(g)∈X∪F,
we haveλ(σ(g)) =π(λ(g)). Here, the action of ΓonFis trivial, i.e. if λ(g)∈F, then
π(λ(g)) =λ(g). It is easy to check that the polynomial computed by a Γ-symmetric algebraic
circuit is itself invariant under the action of Γon its variables.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:5
2.2 Logics from finite model theory
Fixed-point logic with counting
Formulas of fixed-point logic with counting (FPC) are evaluated in finite structures expanded
with a numeric sort as the domain for counting terms. For every finite structure A, let
A∗:=A⊎(N,<,+,·,0,e), whereeis interpreted as|A|. The variables in FPC are typed so
that each variable either has as its domain the point sort (i.e. A) or the numeric sort of A∗.
Point variables are denoted with Roman letters and numeric variables with Greek letters.
The syntax of FPC is that of first-order logic with the following extensions:
Quantifiers over numeric variables: If µis a numeric variable, then quantification over µ
is only allowed in the form Qµ<t.φ , whereQ∈{∃,∀}andtis a numeric term. This
ensures that every numeric variable has a fixed range of polynomial size (with respect to
the size of the point sort) – otherwise, it would not be possible to evaluate FPC-formulas
in polynomial time.
Counting quantifiers : Ifφ(⃗ x,⃗ µ)is an FPC-formula, and νa numeric variable, then
∃≥νφ(⃗ x⃗ µ)is a formula which is true in A∗if the number of satisfying assignments to xis
at least the value of ν.
Fixed-point operators : LetZbe a second-order variable, φan FPC-formula in which
Zoccurs only positively, and ta numeric term. Then [lfpZ⃗ x⃗ µ<t.φ(Z,⃗ x,⃗ µ )](⃗ x⃗ µ)is a
formula of FPC. It is satisfied in (A∗,⃗ x⃗ µ∝⇕⊣√∫⊔≀→⃗ a⃗b)if⃗ a⃗bis in the least fixed-point of the
sequence defined by Z0=∅,Zi+1={⃗ c⃗d|A∗|=φ(Zi,⃗ c,⃗d)}.
There also exists the dual operator [gfpZ⃗ x⃗ µ<t.φ(Z,⃗ x,⃗ µ )](⃗ x,⃗ µ), which computes the
greatest fixed-point.
This is one way to present FPC – there are other equivalent presentations, for example
where the numeric sort in A∗is finite, or where counting termsinstead of counting quantifiers
are used. For more details and background on FPC, we refer to [26] or [8].
Choiceless Polynomial Time
Choiceless Polynomial Time (with counting) can be viewed as an extension of FPC with
higher-order data structures. It properly extends the expressive power of FPC and it remains
an open question whether it can express all polynomial-time decidable properties of finite
structures. It seeks to overcome the limitation of FPC that the stages of a fixed-point
computation are relations of a fixed-arity. In CPT, the computation stages are much more
expressive objects, namely hereditarily finite sets . These are arbitrarily nested finite sets
whose atoms are elements of the respective input structure. CPT has an iteration mechanism
with definable state-updates similar to FPC, with the difference that in each step, new
hereditarily finite sets may be constructed. Thus, computations are not guaranteed to reach
a fixed-point. To guarantee polynomial time evaluation, every CPT-sentence Πcomes with
an explicit polynomial bound p(n):N→N. On an input structure A, the evaluation of Π
is aborted if it takes longer than p(|A|)many steps. Likewise, the constructed h.f. sets are
required to have size at most p(|A|). In this article, we write CPT (p(n))for the fragment
of CPT consisting of sentences whose explicit polynomial bound is p(n). Since CPT is a
logic and the state-updates are definable, the h.f. sets constructed during a computation are
naturally symmetric under the automorphisms of the input structure.
We refrain from giving a formal definition of CPT, since the details are not needed
here and it would be quite lengthy. A concise survey can be found in [ 18]. The work that
XX:6
originally introduced CPT as an abstract state machine model is [ 4]; for a more “logic-like”
presentation of CPT, see BGS-logic [31].
3 Algebraic Proof Systems
Algebraic proof systems are formalisms for refuting the satisfiability of polynomial equation
systems. A refutation is a certificate of unsatisfiability checkable in deterministic or random-
ized polynomial time. Usually, the certificate is based on Hilbert’s Nullstellensatz: It states
that for any polynomial system of equations over a field F,F⊆F[X],Fis unsatisfiable
over the algebraic closure of Fif, and only if, 1is in the ideal generated by F, which
means that there are g1,g2,...,gm∈F[X]such that/summationtext
i≤mfigi= 1. Thus, a refutation
ofFin an algebraic proof system is typically a systematic proof of the existence of such
g1,g2,...,gm. The proof systems we are concerned with are (variants of) the polynomial
calculus(PC) and the Ideal Proof System (IPS). In the following, whenever we speak about
the unsatisfiability of a polynomial system of equations (defined over a field F), we implicitly
mean its unsatisfiability over the algebraic closure of F, as required by the Nullstellensatz.
The efficiency of different proof systems is compared using the standard notion of p-
simulation : LetP1,P2be two proof systems and µ1,µ2be complexity measures for them,
that is, functions that map refutations to natural numbers. Then we write P2≤pP1(with
respect to the measures µ1,µ2, which will usually be clear from the context) if for every
system of polynomial equations F, and every P2-refutation R2, there exists a P1-refutation
R1ofFwithµ1(R1)≤poly(µ2(R2)). We write P1≡pP2ifP2≤pP1andP1≤pP2.
3.1 Polynomial Calculus
The polynomial calculus [ 7] predates the IPS as an algebraic proof system. Unlike the IPS,
the PC is a more classical rule-based system consisting in a set of sound inference rules for
systematically deriving the polynomials in the ideal generated by the input F.
▶Definition 2 (Polynomial Calculus (PC)) .LetF⊆F[X]be a system of polynomial equations
over a field Fwith variables in X.
The inference rules of the polynomial calculus are:
Axiom:ffor allf∈F.
Multiplication:f
xffor anyf∈F[X],x∈X.
Linear Combination:f g
af+bgfor anyf,g∈F[X],a,b∈F.
APCrefutation ofFis a sequence (p1,p2,...,pn= 1)of polynomials such that pnis the
1-polynomial, and each piis either a Boolean axiom, an axiom from F, or is the result of
the application of a proof rule to one or two polynomials pj,pj′withj,j′<i.
The PC is a sound and complete proof system, that is, a polynomial equation system Fis
unsatisfiable if, and only if, there exists a refutation for F. The complexity of this refutation
may in general be super-polynomial.
We consider two complexity measures for the PC. The number of lines of a PC refutation
R= (p1,p2,...,pn= 1)isn, i.e. the length of the derivation sequence. The degree deg(R)of
Ris the maximum degree of any of the pj, for 1≤j≤n. Fork∈N, we denote by degk-PC
the restriction of the PC where only refutations of degree ≤kare allowed. This is no longer
a complete proof system; for instance, it cannot prove the pigeon hole principle [30].
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:7
3.2 Ideal Proof System
The Ideal Proof System (IPS) introduced by Grochow and Pitassi [ 20] is a more general
formalism for proving in a verifiable way that 1is in the ideal generated by a set Fof axioms.
In this proof system, there exist no derivation rules, just a certificate. This takes the form of
an algebraic circuit. IPS in particular p-simulates the polynomial calculus [ 20, Proposition
3.4].
▶Definition 3 (Ideal Proof System (IPS), [ 20]).LetFbe the polynomial equation system
{f1(⃗ x),f2(⃗ x),...,fm(⃗ x)}inF[X]. LetY={y1,y2,...,ym}be a fresh set of variables. An
IPS certificate of unsatisfiability of FoverFis a polynomial C(⃗ x,⃗ y)∈F[X⊎Y]such that
(1)C(⃗ x,⃗0) = 0, and (2)C(⃗ x,⃗f) = 1.
AnIPS proof of unsatisfiability (i.e. a refutation ) ofFis an algebraic circuit Cwith variables
X⊎Yand constants Fcomputing an IPS-certificate of unsatisfiability.
Condition (1) ensures that C(⃗ x,⃗f)is in the ideal generated by F. The unrestricted IPS is
sound and complete, i.e. there is an IPS refutation of Fif, and only if,Fis unsatisfiable
[20]. Note that this is not necessarily a proof system in the sense of Cook and Reckhow as it
is not clear that certificates can be verified in polynomial time. Verifying that a given circuit
indeed computes a valid certificate requires polynomial identity testing (PIT), which is in
randomized polynomial time (but not known to be in P).
We define the size|C|of an IPS proof C= (D,W )as|C|:=min(|D|,|X|+|Y|).That is,
we define the size of a refutation to be at least the instance size. This would be inadequate
for sublinear size refutations but in the symmetric setting that we study here, the smallest
possible proof size is generally |X|+|Y|.
For families (Fn)(n∈N)of instances and corresponding refutations (Cn)(n∈N), we are
mainly interested in IPS refutations of polynomial size|Cn|≤p(|Fn|). When we speak of
the complexity of IPS proofs, we usually mean this complexity measure.
For everyk∈N,degk-IPS denotes the restriction of the IPS in which the semantic degree
deg(C)(see Section 2.1) of any refutation Cis at mostk.
Other natural restrictions of the IPS are obtained by allowing only circuits from certain
circuit classes, such as bounded depth, or as in our case, symmetric circuits. By the
Nullstellensatz, there always exists a ⃗ y-linear(also called Hilbert-like in [20]) IPS refutation
C(⃗ x,⃗ y)for every unsatisfiable F, i.e.C(⃗ x,⃗ y) =/summationtextm
i=1yigi(⃗ x)for some⃗ g∈F[X]. In other
words, the ⃗ y-linear IPS is a sound and complete fragment of the general IPS. We denote
itIPSLIN. It is shown in [ 20] thatIPSLINp-simulates the general IPS on instances that are
themselves representable with polynomial-size algebraic circuits. For fragments of the IPS
with restricted circuit classes, it is however not clear that every proof can efficiently be
simulated by a ⃗ y-linear one. Indeed, for symmetric proofs, as we show, IPSLINturns out to
be a true restriction.
The unrestricted IPS is remarkably powerful: It is shown in [20, Theorem 3.5] that IPS
over any field of characteristic q p-simulates any Frege proof system with MOD q-connectives.
This is even true for Extended Frege, where extension axioms may be used as in the Extended
Polynomial Calculus. Frege systems are standard textbook propositional proof systems such
as the sequent calculus.
4 Symmetric IPS Proofs
We now introduce the symmetry restriction on IPS proofs. That is to say, we consider when
a setFof polynomials that is Γ-invariant for a group Γacting on its variables, admits a
XX:8
Γ-symmetric circuit as an IPS refutation. We start with a formal definition.
▶Definition 4 (Symmetric IPS) .LetΓbe a group and XaΓ-set of variables. Let F=
{f1(⃗ x),...,fm(⃗ x)}⊆F[X]be a Γ-invariant set of polynomials and let Y={y1,...,ym}be a
Γ-set of variables with the following action: For every π∈Γandi∈[m],π(yi) =yjfor the
jwithπ(fi) =fj.
AΓ-symmetric IPS proof of unsatisfiability of Fis aΓ-symmetric algebraic circuit with
variablesX⊎Ycomputing an IPScertificateC(⃗ x,⃗ y)ofF.
Note that if Γ ={id}, then any IPS refutation of Fis also a Γ-symmetric IPS refutation of
F. The complexity of a symmetric IPS refutation in general heavily depends on the choice of
Γ. The bigger Γis and hence the more symmetric the circuits are required to be, the bigger
we can expect the proof size to be.
We generally write Γ-sym-IPS to mean the proof system allowing only Γ-symmetric
proofs. Of course, this only makes sense for sets Fof polynomials that are Γ-invariant. For
these, as we show below, Γ-sym-IPS is a complete proof system. Where Γis clear from
context, we may write just sym-IPS.
LetΓandΓ′be groups acting on Xwith Γ≤Γ′. We say that Γ′-sym-IPSp-simulates Γ-
sym-IPS if for every Γ′-invariantFand a Γ-sym-IPS refutation CofF, there is a Γ′-sym-IPS
refutation ofFwith size polynomial in the size of C. We also use this notion of p-simulation in
thecontextofrestrictedproofsystems, suchaslinearorboundeddegreesystems. Forinstance,
in Theorem 7 below, we show that (in suitably defined cases) degk-IPS≤pdegk-sym-IPS.
This means that for each k, there is a fixed polynomial psuch that whenever a Γ-invariant
Fhas any (i.e.{id}-symmetric) IPS proof of size nand degree k, it also has a Γ-symmetric
IPS proof of size p(n)and degree k.
4.1 Completeness of symmetric IPS
A first natural question that arises when we restrict ourselves to symmetric proofs is whether
every unsatisfiable Γ-symmetric polynomial equation system Fhas a Γ-symmetric refutation.
We show that this is indeed the case, in the sense that any IPS proof can be suitably
symmetrised, though this may entail an exponential blowup in the size of the proof. On the
other hand, there are Ffor which there is no symmetric linearproof, which contrasts with
the fact that linear IPS (without symmetry requirements) is complete.
We first prove the completeness of the symmetric IPS and then provide a simple counter-
example for completeness for sym-IPSLIN.
▶Theorem 5. LetFbe aΓ-symmetric system of polynomial equations. If Fis unsatisfiable,
then there is a Γ-symmetric IPSrefutation ofF.
Proof.Since IPS is complete, there is a certificate C(⃗ x,⃗ y)of unsatisfiability of F, computed
by some algebraic circuit C. We construct a Γ-symmetric circuit Csymwith the same
semantics: For every π∈Γ, we introduce a copy of π(C)in such a way that all these
π(C), for allπ∈C, are identified at their input gates and otherwise disjoint. To finish
the construction, we add a multiplication gate g×as the output of Csym. It multiplies
the outputs of all circuits π(C), for allπ∈Γ. The resulting circuit CsymisΓ-symmetric
by construction because every π∈Γextends to a circuit automorphism that maps each
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:9
subcircuitπ′(C)to(π◦π′)(C). We can also verify that Csymis again a refutation:
Csym(⃗ x,⃗0) =/productdisplay
π∈Γπ(C(⃗ x,⃗0)) =/productdisplay
π∈ΓC(π⃗ x,π⃗0)/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
=0= 0. (1)
Csym(⃗ x,⃗f) =/productdisplay
π∈Γπ(C(⃗ x,⃗f)) =/productdisplay
π∈ΓC(π⃗ x,π⃗f)/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
=1= 1. (2)
In the last equality of (1) and (2) we used that 0and1areΓ-symmetric polynomials, so if
C(⃗ x,⃗0) = 0, then alsoC(π⃗ x,π⃗0) = 0for everyπ∈Γ(and likewise for 1). In the penultimate
equality of (2), we also use the Γ-invariance ofFand the fact that the action of ΓonYis
exactly as given by the lift of its action on XtoF. ◀
This relatively naive construction blows up the size of the circuit by a factor of |Γ|, which
may be as large as |X|!·|Y|!. So even though there always exists a symmetric refutation,
this may in general be much larger than the smallest asymmetric refutation.
The following example shows that there are cases where symmetric linearrefutations do
not exist, regardless of the circuit size.
▶Example 6. Let the variable set be X={x1,x∗
1,x2,x∗
2}and let Γ≤Sym (X)be the group
thatisgeneratedby {π,π∗}definedasfollows: π= (x1x2)◦(x∗
1x∗
2), andπ∗= (x1x∗
1)◦(x2x∗
2).
That is,πexchanges 1and2, andπ∗exchanges non-star with star. Consider the following
equations over F2:
(1)x1+x2= 1(3)x∗
1+x2= 1(5)x1+x∗
1= 1
(2)x∗
1+x∗
2= 1(4)x1+x∗
2= 1(6)x2+x∗
2= 1
The equations are partitioned into three Γ-orbits. Equation (1) and (2) form an orbit,
equation (3) and (4) as well, and equation (5) and (6). The system is unsatisfiable over
F2(and its algebraic closure) because (1) + (4) + (6) is an IPS certificate of unsatisfiability.
Nonetheless, there is no linear Γ-symmetric refutation C(⃗ x,⃗ y): Every monomial in such
a certificate C(⃗ x,⃗ y)would contain exactly one ⃗ y-variable. In order to have C(⃗ x,⃗f) = 1,
there must be a degree- 1monomial in C(⃗ x,⃗ y), i.e. consisting only of a single ⃗ y-variableyi.
But then, the entire orbit of yimust appear in C(⃗ x,⃗ y)due to symmetry. As each orbit of
equations has even size and the field has characteristic 2, the constant terms in C(⃗ x,⃗f)sum
up to 0. Hence, there is no symmetric ⃗ y-linear polynomial with C(⃗ x,⃗f) = 1.
On the other hand, we can show that as long we are working over a field Fof characteristic
either 0or coprime with the order of Γ, then any Γ-invariant setFof polynomials has a
Γ-symmetric linear refutation. This follows from Corollary 9 below.
4.2 Symmetry in Bounded-Degree IPS
Recall that for any constant k∈N,degk-IPS is the restriction of IPS where the polynomials
computed at each gate have degree at most k. This bounded-degree fragment is of special
interest because of its relation to the bounded-degree polynomial calculus, whose expressive
power is related to important logics from finite model theory and also to the well-known
Weisfeiler-Leman graph isomorphism algorithm (see Section 5). We show that constant-degree
IPS proofs can be symmetrised efficiently, under certain assumptions on the field and the
symmetry group (which are satisfied in most interesting cases). Thus, in the bounded-degree
regime, requiring proofs to be symmetric is essentially no restriction.
▶Theorem 7. LetFbe a field and let Γbe a group such that either char(F) = 0, orFhas
positive characteristic and |Γ|andchar(F)are coprime. Let k∈Nbe a constant. Then for
XX:10
every Γ-invariant polynomial equation system F⊆F[X]that possesses a degk-IPSrefutation
C, there also exists a Γ-symmetric refutationCsymwith|Csym|≤O (|F|k)≤O(|C|k). IfC
is⃗ y-linear, then so is Csym.
Proof.LetC(⃗ x,⃗ y)be a certificate of unsatisfiability of the polynomial equation system F,
computed by a circuit with semantic degree k. LetM⊆F[X∪Y]be the set of monomials
appearing in C(⃗ x,⃗ y). Then the certificate C(⃗ x,⃗ y)can be written as/summationtext
m∈Mcm·m(⃗ x,⃗ y),
wherecm∈Fand everym∈Mhas degree at most k. We define Csym(⃗ x,⃗ y) :=|Γ|−1·/summationtext
π∈ΓπC(⃗ x,⃗ y).This polynomial Csym(⃗ x,⃗ y)is also an IPS certificate of unsatisfiability of F
since
(1)Csym(⃗ x,⃗0) =|Γ|−1·/summationtext
π∈ΓπC(⃗ x,⃗0) = 0, and
(2)Csym(⃗ x,⃗f) =|Γ|−1·/summationtext
π∈ΓπC(⃗ x,⃗f) =|Γ|−1·|Γ|·1 = 1.
Note that|Γ|−1is defined in Fsince either the characteristic of Fis zero, or it is coprime
with|Γ|. Let ΓMbe the closure of Munder the action of Γ, i.e. ΓM:=/uniontext
π∈Γπ(M).Now
Csym(⃗ x,⃗ y)has the form
Csym(⃗ x,⃗ y) =|Γ|−1/summationdisplay
π∈Γ/summationdisplay
m∈Mcm·π(m(⃗ x,⃗ y)) =|Γ|−1/summationdisplay
m∈ΓM/parenleftig/summationdisplay
π∈Γcπ−1(m)/parenrightig
·m
The number of distinct monomials in Csym(⃗ x,⃗ y)is at mostO((|X|+|Y|+ 1)k)because all
monomials have degree at most k. Thus, the circuit that just expresses Csym(⃗ x,⃗ y)as a sum
of monomials has polynomial size, and it it also symmetric because Csym(⃗ x,⃗ y)is symmetric
by construction. By our convention (see Section 3.2), |C|≥|X|+|Y|, so|Csym|≤poly(|C|).
IfCis⃗ y-linear, then so is Csymbecause ifMcontains only ⃗ y-linear monomials, then this is
still true for ΓM. ◀
▶Corollary 8. LetFbe a field and let Γbe a group such that either char(F) = 0, orFhas
positive characteristic and |Γ|andchar(F)are coprime. Let k∈Nbe a constant. Then for
this field and symmetry group, degk-PC≤pdegk-sym-IPSLIN.
Proof.Any degree- kPC refutation can be translated in a straightforward way into a degree- k
IPSLIN-refutation (see [ 20, Proposition 3.4]). This can be efficiently Γ-symmetrised using
Theorem 7. ◀
▶Corollary 9. LetFbe a field and let Γbe a group such that either char(F) = 0, orFhas
positive characteristic and |Γ|andchar(F)are coprime. Then, any Γ-invariant unsatisfiable
set of polynomials Fover this field has a Γ-symmetric linear refutation.
Proof.IfFis an unsatisfiable polynomial equation system, then it has a PC refutation by
the completeness of polynomial calculus. Let kbe its degree. By Corollary 8, there exists a
Γ-degk- sym-IPSLIN-refutation. ◀
5 Applications in Finite Model Theory and Graph Isomorphism
We now turn to other well-studied symmetry-invariant formalisms and show that they are
subsumed by the symmetric IPS in a certain sense. These formalisms are logics from finite
model theory, specifically fixed-point logic with counting (FPC) and Choiceless Polynomial
Time(CPT). Drawing on previous work [ 29,27], we show how their expressive power relates
to the power of sym-IPS, specifically with respect to the graph isomorphism problem.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:11
5.1 Simulating fixed-point logic with counting in sym-IPS
The evaluation of any sentence ψin fixed-point logic with counting in a given finite structure
Acan be simulated by a bounded-degree symmetric IPS proof over Qin the following sense.
For every fixed FPC-sentence ψand structure A, there is an axiom system Fψ(A)that
expresses the existence of a winning strategy in the model-checking game for A|=ψ. This is
an instance of a threshold safety game [19]. An IPS refutation of Fψ(A)is then a witness for
the fact that A|=ψ. The axiom system Fψ(A)is FOC-interpretable in A, meaning that it is
FO-definable in Aextended with a numeric sort (see Section 2.2). In total, the problem of
deciding the existence of a bounded-degree sym-IPS refutation for a given axiom system is
complete for FPC under efficient symmetry-preserving reductions:
▶Theorem 10. For every FPC-sentenceψwith signature τ, there exists an FOC-definable
mappingFψthat takes every finite τ-structure Ato a polynomial equation system Fψ(A)
overQsuch that:
1.|Fψ(A)|≤poly(|A|).
2.Aut(A)has a natural action on the variables of Fψ(A), andFψ(A)isAut(A)-invariant.
3.Fψ(A)is unsatisfiable if, and only if, A|=ψ.
4.IfFψ(A)is unsatisfiable, then Fψ(A)has an Aut(A)-symmetric deg2-IPSLINrefutation
of sizepoly(|Fψ(A)|).
This is mainly a consequence of Theorem 4.4 in [ 29]. There, the desired mapping Fψis
constructed and it is shown that Fψ(A)has a degree- 2PC refutation RoverQif and only
ifA|=ψ. By Corollary 8, there also exists a Aut(A)-symmetric deg2-IPS LIN-refutation of
sizepoly(|R|), and even of size poly(|Fψ(A)|)(see Theorem 7). This proves Item 4 from the
theorem. The first two items follow from the properties of FOC-interpretations and the third
item is due to the construction in [29].
5.2 Symmetric IPS proofs of graph non-isomorphism
Now we pass on from FPC to a stronger logic, namely Choiceless Polynomial Time (CPT)
and show that this, too, can in a certain sense be simulated in sym-IPSLIN. The greater
model-theoretic expressiveness of CPT is reflected on the proof system side in the fact that
we (provably) need to go beyond the bounded-degree regime. Another difference to the
simulation of FPC is that we now consider a fixed problem, namely graph isomorphism . We
show that sym-IPSLINefficiently distinguishes all graphs (using their natural symmetries as
the symmetry group) that are also distinguishable in CPT.
Distinguishing graphs in an algebraic proof system
Whenever we speak of graphsin this section, they may be vertex and edge coloured. Given
two graphs GandH, there is a standard system of polynomial equations Fiso(G,H )[3,27]
whose solutions encode isomorphisms between GandH. Thus,GandHare non-isomorphic
if, and only if,Fiso(G,H )is unsatisfiable. The variable set of Fiso(G,H )isX:={xvw|
v∈V(G),w∈V(H),v∼w}, where∼⊆V(G)×V(H)is the relation that contains
all(v,w)such thatvandwhave the same colour. The polynomials of Fiso(G,H )are:/summationtext
v∈V(G)v∼wxvw−1for eachw∈V(H),/summationtext
w∈V(H)v∼wxvw−1for eachv∈V(G), andxvwxv′w′for
allv,v′∈V(G),w,w′∈V(H)withv∼w,v′∼w′and such that vv′∝⇕⊣√∫⊔≀→ww′is not a local
isomorphism. The Boolean axioms x2−xfor allx∈Xare also part ofFiso(G,H ). The
idea behind this formulation is that a satisfying Boolean assignment to the variables in X
XX:12
encodes an isomorphism from GtoHin the sense that v∈V(G)is mapped to w∈V(H)
if, and only if, xvwis assigned to 1. Note that Aut(G)×Aut(H)acts naturally on X: Let
(πG,πH)∈Aut(G)×Aut(H). Then (πG,πH)(xvw) =xπG(v)πH(w). It is not hard to see that
Fiso(G,H )is invariant under this group action: The polynomials associated with vertices in G
andHareclearlysymmetricandthepolynomials xvwxv′w′thatforbidlocalnon-isomorphisms
depend on the edges and non-edges, which are preserved by Aut(G)×Aut(H).
When we say that an algebraic proof system distinguishes two graphs GandH, we mean
thatitadmitsarefutationof Fiso(G,H ). IfKisaclassofgraphs, thenwesaythat sym-IPSLIN
efficiently distinguishes all non-isomorphic graphs in Kif there exists a polynomial p(n)such
that for any two non-isomorphic G,H∈K, there exists an Aut(G)×Aut(H)-symmetric
IPSLIN-refutation CofFiso(G,H )of size|C|≤p(|Fiso(G,H )|)over the field Q.
Distinguishing graphs in Choiceless Polynomial Time
For any pair of non-isomorphic graphs GandH, there is some formula (say of first-order
logic) that distinguishes them. For a class of graphs, we are interested in obtaining bounds
(say on the number of variables or other parameters) of the minimum distinguishing formulas
for pairs of non-isomorphic graphs from the class. Here we are particularly interested in the
number of variables of an FPCformula, or the resource bounds of a CPT sentence. And, we
relate these to bounds on the IPS refutation of Fiso(G,H ).
▶Definition 11 (Distinguishing graphs in CPT, [ 27]).LetKbe a class of graphs. We say that
CPTdistinguishes all graphs in Kif there exists a polynomial p(n)and a constant k∈N
such that for any two non-isomorphic G,H∈K, there exists a sentence Π∈CPT (p(n))with
≤kvariables such that G|= ΠandH̸|= Π.
Recall from Section 2.2 that CPT (p(n))is the fragment of CPTwhose sentences have resource
bound at most p(n). Similarly, the k-variable fragment of FPC distinguishes all graphs in K
if there exists a distinguishing FPC-sentence with ≤kvariables for all G̸∼=HinK.
▶Theorem 12. LetKbe a graph class.
1.If there is a k∈Nsuch that the k-variable fragment of FPCdistinguishes all non-
isomorphic graphs in K, then so does symmetric degk-IPS.
2.IfCPTdistinguishes all non-isomorphic graphs in K, thensym-IPSLINefficiently distin-
guishes them.
Note that the situation in the first statement is equivalent to the non-isomorphic graphs
inKbeing distinguishable by the well-known k-dimensional Weisfeiler Leman algorithm
[23]. The first part then follows from [ 3, Theorem 4.4], which states that k-Weisfeiler-Leman-
distinguishable graphs can also be distinguished in the degree- kPC. This can be p-simulated
by the degree- ksym-IPS by Corollary 8. To prove the second part, we use Theorem 1 from
[27]. It shows that if all non-isomorphic graphs in Kare CPT-distinguishable in the sense of
Definition 11, then they are also distinguishable in the degree- 3extended polynomial calculus
(EPC), and the refutations have polynomial size. As discussed in the conclusion of [ 27], this
EPC refutation is symmetric in the sense that its extension axioms are closed under the
action of Aut(G)×Aut(H). To conclude the second item of Theorem 12, we show that
any symmetric bounded-degree EPC refutation can be simulated efficiently in sym-IPSLIN.
The proof, including the definition of symmetric EPC , is deferred to the appendix (Theorem
22). Another result from [ 27] immediately gives us the following separation between the
bounded-degree (symmetric) IPS and its unbounded version.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:13
▶Theorem 13. There exists a sequence (Gn,Hn)n∈Nof pairs of non-isomorphic graphs such
thatFiso(Gn,Hn)has a polynomial-size Aut(G)×Aut(H)-symmetric IPSLIN-refutation but
there is no k∈Nsuch that for all n∈N,Fiso(Gn,Hn)has a degk-sym-IPS-refutation.
Proof.Theorem 3 in [ 27] yields exactly this statement for the symmetric degree- 3EPC
and the degree- kPC. By Theorem 22, the symmetric degree- 3EPC can be p-simulated
bysym-IPSLIN. Now suppose for a contradiction that Fiso(Gn,Hn)had a degree- ksym-IPS-
refutation for some constant k, for alln∈N. This is in particular a degree- kIPS refutation.
Using existing results, it can be shown that on instances of constant degree (which we have
here), bounded-degree IPS refutations can be simulated in bounded-degree PC. A proof of
this is given in Theorem 23 in the appendix. This yields a contradiction to [ 27, Theorem 3],
which states that the bounded-degree PC cannot refute Fiso(Gn,Hn)for alln∈N. ◀
The graphs (Gn,Hn)that are used as hard instances for the bounded-degree IPS are the
well-known Cai-Fürer-Immerman (CFI) graphs [ 3,6], equipped with a linear order on their
base graphs. These are standard examples of graphs that are indistinguishable in bounded-
variable counting logic and hence FPC. The above theorem tells us that these graphs are in
fact efficiently distinguishable in sym-IPSLIN. This is because there is a CPT-sentence which
can tellGnandHnapart, for all n∈N– that sentence uses a sophisticated “circuit-like”
construction due to [ 13]. Via Theorem 12, this translates into a polynomial-size sym-IPSLIN-
refutation. In the next section, we study a different well-known formulation of the CFI graph
isomorphism problem as a system of linear equations over a finite field. We show that also
that presentation of the problem admits polynomial-size sym-IPSLIN-refutations.
6 Upper bounds
6.1 The Cai-Fürer-Immerman equations
The algebraic formulation of the isomorphism problem of Cai-Fürer-Immerman graphs is the
following system of equations over F2(see e.g. [1]).
▶Definition 14 (CFI equations) .LetG= (V,E)be a 3-regular undirected connected graph.
Letu∈V(G)be some fixed distinguished vertex and let a∈{0,1}. The variable set is
X={xe
i|e∈E,i∈F2}. The equations are
xe
i+xf
j+xg
k=i+j+kmod 2 for everyv∈V\{u},{e,f,g}=E(v),
and everyi,j,k∈F2
xe
i+xf
j+xg
k=i+j+k+amod 2 for vertexu,{e,f,g}=E(u),
and everyi,j,k∈F2
xe
0+xe
1= 1 for everye∈E
This, together with the Boolean axioms for every variable, is the linear equation system
FCFI(G,u,a )overF2.
This system is satisfiable if, and only if, a= 0[1]. The typical symmetries that are
associated with CFI graphs (over linearly ordered base graphs) are called “edge flips”. With
regardstotheequationsystem, thismeansthefollowing. Let ΓbethesubgroupoftheBoolean
vector space (FE
2,⊕)which consists only of those vectors πsuch that/summationtext
e∈E(v)π(e) = 0
mod 2for everyv∈V. The action of this group on Xis given by π(xe
i) =xe
i+πe, where
addition is in F2, andπedenotes the entry of πat indexe∈E. It is easy to check that
FCFI(G,u,a )isΓ-invariant.
XX:14
▶Theorem 15. Let(Gn)n∈Nbe an arbitrary family of 3-regular graphs, and let Γnbe the
subgroup of FE(Gn)
2defined above. For every n∈N, there exists a non-⃗ y-linear Γn-sym-IPS-
refutation over F2of the unsatisfiable equation system FCFI(Gn,un,1)(regardless of the
choice ofun∈V(Gn)), which has size at most poly(|FCFI(Gn,un,1)|).
In particular, the theorem is true if (Gn)n∈Nis a family of unbounded treewidth. Such
families of graphs are the ones for which the equation systems FCFI(Gn,un,1)are not
distinguishable from their satisfiable counterparts FCFI(Gn,un,0)in bounded-variable count-
ing logic [ 1]. This also means that FCFI(Gn,un,1)has no bounded-degree PC refutation:
The existence of such a refutation is definable in bounded-variable counting logic [ 29],
and hence, bounded-variable counting logic would be able to distinguish FCFI(Gn,un,1)
fromFCFI(Gn,un,0)if bounded-degree PC could refute FCFI(Gn,un,1). Thus, this the-
orem provides another example for the separation of the bounded-degree PC/IPS from the
unbounded-degree version.
The construction of the refutation is quite involved, so we have to defer the proof of
Theorem 15 to the appendix. We just remark that the circuit for the IPS certificate is
deeply nested and computes polynomials of linear degree, so it is challenging to ensure
that each gate only has a small number of automorphic images under the action of Γ. In
fact, we have not been able to accomplish this with a ⃗ y-linear certificate, so the smallest
possible sym-IPSLIN-refutation we know is exponential:
▶Theorem 16. Let the setting be as in Theorem 15. For every n∈N, there exists a
Γn-sym-IPSLIN-refutation over F2of the unsatisfiable equation system FCFI(Gn,un,1), which
has size at mostO(2|En|).
It is an interesting open question whether the CFI equations provide an exponential
separation between sym-IPS andsym-IPSLIN, that is, whether the upper bound in the above
theorem can be improved or not. As discussed in the previous section, the graph isomorphism
formulation of the CFI equations does admit a small sym-IPSLIN-refutation but it may well
be that this is not the case for FCFI(Gn,un,1).
6.2 Subset sum
▶Definition 17 (Subset sum, [ 16]).Letn∈N, letFbe a field with char(F)> n, and let
β∈F\{0,...,n}. Thesubset sum instanceFsum(⃗ x)(n,F,β)has variable set X={x1,...,xn},
and the axiom/summationtextn
i=1xi−β= 0,along with the Boolean axioms x2
i−xi= 0for alli∈[n].
Thelifted subset sum instanceFsum(⃗ x⃗ y)(n,F,β)has variable set X∪{y1,...,yn}and the
axiom/summationtextn
i=1xiyi−β= 0,along with the Boolean axioms for all variables in X∪Y.
It is clear thatFsum(⃗ x)(n,F,β)andFsum(⃗ x⃗ y)(n,F,β)are unsatisfiable for any choice of n,F,β
as required in the definition. Moreover, Fsum(⃗ x)(n,F,β)isSymn-symmetric with respect
to the obvious action on X, andFsum(⃗ x⃗ y)(n,F,β)isSymn-symmetric with respect to the
simultaneous action on X∪Y. It is proven in [ 16, Proposition 5.3] that Fsum(⃗ x)(n,F,β)has
nodegk-IPS LINrefutation for any k<n. Moreover, [ 16] showsFsum(⃗ x)(n,F,β)to be hard for
sparse IPS (where circuits are just allowed to be sums of monomials) and Fsum(⃗ x⃗ y)(n,F,β)
to be hard for roABPs with a fixed variable order, and so-called depth-3 powering formulas.
Subset sum and its liftings are thus a natural starting point in the quest for sym-IPS
lower bounds, especially because the variable set is “maximally symmetric” and so it might
be expected that the size of any symmetric refutation must be large. However, it turns
out that at least for the two subset sum variants we study here, polynomial-size symmetric
refutations do in fact exist. There are more complex liftings of the subset axiom that have
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:15
been used for lower bounds against stronger fragments of IPS such as bounded product-depth
circuits [17, 22], and these may be promising candidates for sym-IPS lower bounds, too.
▶Theorem 18. The polynomial equation system Fsum(⃗ x)(n,F,β)has a Symn-sym-IPSLIN-
refutation of size at most poly(|Fsum(n,F,β)|), for alln,F,βsuch that the system is unsat-
isfiable. The same is true for Fsum(⃗ x⃗ y)(n,F,β). Moreover, there is no constant k∈Nsuch
thatdegk-IPScan refuteFsum(⃗ x)(n,F,β)andFsum(⃗ x⃗ y)(n,F,β)for alln∈N.
The full proof of the theorem can be found in the appendix. In short, we show that the
refutation given in Proposition B.1 in the appendix of [ 16] can be realised with polynomial-
size symmetric circuits. The key ingredient are the elementary symmetric polynomials
Sn,k=/summationtext
S⊆[n]
|S|=k/producttext
i∈Sxi. They admit efficient symmetric circuits by [33].
6.3 Pigeonhole principle
▶Definition 19. Forn,m∈N, then-to-mpigeonhole principle is the polynomial equation
systemFPHP(n,m). Its variable set is X={xij|i∈[n],j∈[m]}and its equations are the
Boolean axioms together with:
/summationdisplay
j∈[m]xij−1 = 0for everyi∈[n]
xijxi′j= 0for everyj∈[m],i̸=i′∈[n]
Any{0,1}-valued solution to this system gives an injective function from [n]to[m]that maps
itojifxij= 1. The equation/summationtext
j∈[m]xij−1 = 0guarantees that each value iis mapped to
exactly one jandxijxi′j= 0ensures that distinct iandi′are not mapped to the same value.
Whenevern>m,FPHP(n,m)is thus unsatisfiable. This is the case over Q, but also over
every finite field. It is easy to see that FPHP(n,m)is invariant under Symn×Symm, where
the group action on Xis:(π,σ)(xij) =xπ(i)σ(j). In this section, we focus on the pigeonhole
principleFPHP(n+ 1,n). It can be checked that over finite fields, FPHP(n+ 1,n)does not
admit a symmetric ⃗ y-linear refutation for all n(analogous to Example 6). Therefore, we only
considerFPHP(n+ 1,n)overQ.
With no symmetry restriction in place, it is – not surprisingly – possible to refute
FPHP(n+ 1,n)efficiently in the IPS. Indeed, the IPS p-simulates any Frege proof system [ 20],
and the pigeonhole principle, formulated in propositional logic has a polynomial-size Frege
proof [5]. The proof constructed in [ 5], however, proceeds along a linear order on [n]. Thus,
a naive symmetrisation of it would require size O(n!). We show that we can do much better
than that, although we do not obtain a symmetric refutation of subexponential size. It
is plausible that this is impossible, and we leave the precise complexity of symmetrically
refuting the pigeonhole principle as an intriguing open problem.
▶Theorem 20. There is a (Symn+1×Symn)-sym-IPSLINrefutation ofFPHP(n+ 1,n)of
sizeO(3n·n)over the field Q.
The key part of the refutation is to compute, for every subset D⊆[n+ 1]the sum over all
monomials that encode injections from the pigeons in Dto the holes. Formally, let BD(⃗ x):=/summationtext
γ:D◁arrowhookleft→[n]/producttext
i∈Dxiγ(i).The polymnomials BD(⃗ x)can also be viewed as the sums of certain
permanents . The permanent of an n×n-matrix is the polynomial/summationtext
π∈Symn/producttext
i∈[n]xiπ(i).
The polynomial BD(⃗ x)is the sum over the permanents of all |D|×|D|-submatrices of D×[n].
This hints at the potential hardness of symmetric refutations for the PHP because we know
that the permanent admits no symmetric circuit representation of subexponential size [ 14].
XX:16
In the proof of Theorem 20 in the appendix, we construct an O(3n)-size symmetric circuit for
computing the BDfor allD⊆[n+1]and show how this yields a refutation for FPHP(n+1,n).
7 Conclusion and future work
This article initiates the study of how symmetry in IPS proofs affects their complexity. We
identify the following promising directions for future research: Firstly, we would like to obtain
matching lower bounds for the exponential upper bounds we have established – that is, for
linearsymmetric IPS refutations of the CFI equations (which would show an exponential
gap between linear and non-linear refutations), and for the pigeonhole principle. Secondly,
the question in how far the functional lower bound method [ 16,17,22] can be combined
with our framework deserves a deeper investigation. We have shown that the subset sum
axiom and one of its liftings do admit small symmetric proofs but this does not rule out
a lower bound via more complex subset sum variants such as in [ 17,22]. Also, it is worth
studying if the symmetry restriction we consider here, combined with the functional lower
bound method from [ 17,22] can extend the scope of that technique. So far, the functional
lower bound method has only been applied to instances with a single axiom , and it provably
fails on encodings of Boolean formulas [ 22]; can these limitations of the functional lower
bound method be overcome by restricting to symmetric refutations? Finally, we ask if the
connection between IPS lower bounds for Boolean CNFs and the separation of VPandVNP
established by Grochow and Pitassi [ 20] also holds in a symmetric sense. That is, for a
suitably defined symmetric analogue of VNP, is it true that every unsatisfiable CNF has an
IPS refutation in symmetric VNP?
References
1Albert Atserias, Andrei Bulatov, and Anuj Dawar. Affine systems of equations and counting
infinitary logic. Theoretical Computer Science , 410(18):1666–1683, 2009.
2Paul Beame and Toniann Pitassi. Propositional proof complexity: Past, present, and future.
Current Trends in Theoretical Computer Science Entering the 21st Century , pages 42–70, 2001.
3Christoph Berkholz and Martin Grohe. Limitations of algebraic approaches to graph iso-
morphism testing. In Magnús M. Halldórsson, Kazuo Iwama, Naoki Kobayashi, and Bettina
Speckmann, editors, Automata, Languages, and Programming , pages 155–166, Berlin, Heidel-
berg, 2015. Springer Berlin Heidelberg.
4Andreas Blass, Yuri Gurevich, and Saharon Shelah. Choiceless polynomial time. Annals
of Pure and Applied Logic , 100(1):141–187, 1999. URL: https://www.sciencedirect.com/
science/article/pii/S0168007299000056 ,doi:10.1016/S0168-0072(99)00005-6 .
5Samuel R Buss. Polynomial size proofs of the propositional pigeonhole principle. The Journal
of Symbolic Logic , 52(4):916–927, 1987.
6J. Cai, M. Fürer, and N. Immerman. An optimal lower bound on the number of variables for
graph identification. Combinatorica , 12:389–410, 1992.
7Matthew Clegg, Jeffery Edmonds, and Russell Impagliazzo. Using the Groebner basis algorithm
to find proofs of unsatisfiability. In Proceedings of the twenty-eighth annual ACM symposium
on Theory of computing , pages 174–183, 1996.
8Anuj Dawar. The nature and power of fixed-point logic with counting. ACM SIGLOG News ,
2(1):8–21, 2015.
9Anuj Dawar. Symmetric computation (invited talk). In 28th EACSL Annual Conference on
Computer Science Logic, CSL 2020 , 2020. doi:10.4230/LIPIcs.CSL.2020.2 .
10Anuj Dawar. Limits of symmetric computation (invited talk). In 51st International Colloquium
on Automata, Languages, and Programming, ICALP 2024 , volume 297 of LIPIcs, pages 1:1–1:8,
2024. doi:10.4230/LIPICS.ICALP.2024.1 .
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:17
11Anuj Dawar and Benedikt Pago. A logic for P: are we nearly there yet? ACM SIGLOG News ,
11:35–60, 2024. doi:10.1145/3665453.3665459 .
12AnujDawar, BenediktPago, andTimSeppelt. Symmetricalgebraiccircuitsandhomomorphism
polynomials. arXiv, abs/2502.06740, 2025. URL: https://arxiv.org/abs/2502.06740 .
13Anuj Dawar, David Richerby, and Benjamin Rossman. Choiceless Polynomial Time, Counting
and the Cai–Fürer–Immerman graphs. Annals of Pure and Applied Logic , 152(1-3):31–50,
2008.
14Anuj Dawar and Gregory Wilsenach. Symmetric Arithmetic Circuits. In 47th International
Colloquium on Automata, Languages, and Programming (ICALP 2020) , volume 168 of LIPIcs,
pages 36:1–36:18. Schloss Dagstuhl – Leibniz-Zentrum für Informatik, 2020. doi:10.4230/
LIPIcs.ICALP.2020.36 .
15Anuj Dawar and Gregory Wilsenach. Lower bounds for symmetric circuits for the determinant.
In13th Innovations in Theoretical Computer Science Conference, ITCS , volume 215 of
LIPIcs, pages 52:1–52:22. Schloss Dagstuhl - Leibniz-Zentrum für Informatik, 2022. doi:
10.4230/LIPICS.ITCS.2022.52 .
16Michael A. Forbes, Amir Shpilka, Iddo Tzameret, and Avi Wigderson. Proof Complexity
Lower Bounds from Algebraic Circuit Complexity. In Ran Raz, editor, 31st Conference on
Computational Complexity (CCC 2016) , volume 50 of Leibniz International Proceedings in
Informatics (LIPIcs) , pages 32:1–32:17, Dagstuhl, Germany, 2016. Schloss Dagstuhl–Leibniz-
Zentrum fuer Informatik. URL: http://drops.dagstuhl.de/opus/volltexte/2016/5832 ,
doi:10.4230/LIPIcs.CCC.2016.32 .
17Nashlen Govindasamy, Tuomas Hakoniemi, and Iddo Tzameret. Simple hard instances for low-
depth algebraic proofs. In 2022 IEEE 63rd Annual Symposium on Foundations of Computer
Science (FOCS) , pages 188–199. IEEE, 2022.
18Erich Grädel and Martin Grohe. Is Polynomial Time Choiceless? In Fields of Logic and
Computation II , pages 193–209. Springer, 2015.
19Erich Grädel and Stefan Hegselmann. Counting in Team Semantics. In Jean-Marc Talbot and
Laurent Regnier, editors, 25th EACSL Annual Conference on Computer Science Logic (CSL
2016), volume62of Leibniz International Proceedings in Informatics (LIPIcs) , pages35:1–35:18,
Dagstuhl, Germany, 2016. Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik. URL: http:
//drops.dagstuhl.de/opus/volltexte/2016/6575 ,doi:10.4230/LIPIcs.CSL.2016.35 .
20Joshua A. Grochow and Toniann Pitassi. Circuit Complexity, Proof Complexity, and Polyno-
mial Identity Testing: The Ideal Proof System. J. ACM, 65(6), 11 2018. doi:10.1145/3230742 .
21Armin Haken. The intractability of resolution. Theoretical computer science , 39:297–308, 1985.
22Tuomas Hakoniemi, Nutan Limaye, and Iddo Tzameret. Functional lower bounds in algebraic
proofs: Symmetry, lifting, and barriers. In Proceedings of the 56th Annual ACM Symposium
on Theory of Computing , pages 1396–1404, 2024.
23Sandra Kiefer. The Weisfeiler-Leman algorithm: an exploration of its power. ACM SIGLOG
News, 7(3):5–27, 2020.
24Jan Krajíček. Proof Complexity , volume 170. Cambridge University Press, 2019.
25Nutan Limaye, Srikanth Srinivasan, and Sébastien Tavenas. New non-fpt lower bounds for
some arithmetic formulas. ECCC, 2021.
26Martin Otto. Bounded Variable Logics and Counting , volume 9 of Lecture Notes in Logic .
Springer, 1997.
27BenediktPago. FiniteModelTheoryandProofComplexityRevisited: DistinguishingGraphsin
Choiceless Polynomial Time and the Extended Polynomial Calculus. In Bartek Klin and Elaine
Pimentel, editors, 31st EACSL Annual Conference on Computer Science Logic (CSL 2023) ,
volume 252 of Leibniz International Proceedings in Informatics (LIPIcs) , pages 31:1–31:19,
Dagstuhl, Germany, 2023. Schloss Dagstuhl – Leibniz-Zentrum für Informatik. URL: https:
//drops.dagstuhl.de/opus/volltexte/2023/17492 ,doi:10.4230/LIPIcs.CSL.2023.31 .
28Wied Pakusa. Linear Equation Systems and the Search for a Logical Characterisation of
Polynomial Time . PhD thesis, RWTH Aachen, 2015.
XX:18
29Wied Pakusa, Benedikt Pago, Martin Grohe, and Erich Grädel. A Finite-Model-Theoretic
View on Propositional Proof Complexity. Logical Methods in Computer Science , 15, 2019.
30Alexander A Razborov. Lower bounds for the polynomial calculus. computational complexity ,
7:291–324, 1998.
31Benjamin Rossman. Choiceless Computation and Symmetry. In Fields of Logic and Computa-
tion, pages 565–580. Springer, 2010.
32Nathan Segerlind. The Complexity of Propositional Proofs. Bulletin of symbolic Logic ,
13(4):417–481, 2007.
33Amir Shpilka and Avi Wigderson. Depth-3 arithmetic circuits over fields of characteristic zero.
Computational Complexity , 10:1–27, 2001.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:19
A Simulation of the extended polynomial calculus in symmetric IPS
The simulation presented here is essential in the proof of Theorem 12. The extended
polynomial calculus (EPC) is an extension of the polynomial calculus with the extension rule :
xe−fe, for anyfe∈F[X⊎XE]
whereXis the variable set of the instance and xeis anextension variable distinct from the
variables in X, andXEdenotes the set of all extension variables. For an EPC refutation to be
correct, there must exist a linear order ⪯on the set of extension variables in it, which satisfies:
In every extension axiom xe−fe, the polynomial feonly contains extension variables that
are smaller than xewith respect to⪯. We refer to this as a hierarchical ordering of the
extension axioms. An EPC refutation of Finvolving a setEof extension axioms can also be
viewed as a (non-extended) PC refutation of F∪E. By degk-EPC we denote the restriction
of EPC where every proof line has degree at most k. Admissible instances for these proofs
systems must also have degree at most k.
For the proof of Theorem 12, it is necessary to simulate symmetric deg3-EPC refutations
by symmetric refutations in IPSLIN. The deg3-EPC refutations that we wish to simulate are
symmetric in the following relatively weak sense.
Symmetric EPC
LetΓbe a group acting on X. LetE={e1,e2,...,er}be a set of hierarchical extension
axioms over Xwithe1⪯e2⪯...⪯erandei=xei−fei, where the xei/∈Xare extension
variables. We say that the action of Γnaturally lifts toEif the following three conditions
hold:
1.There exists a partition of Einto classes C1,C2,...,Cmsuch that for each i∈[m], for
every extension axiom e=xe−fe∈Ci,feonly contains extension variables from classes
Cjwithj <i.
2.There are no two extension axioms xe−feandxe′−fe′inEsuch thatfe=fe′and
xe̸=xe′.
3.For everyCiand everyπ∈Γ,π(Ci) =Ci.
For the third item, the action of π∈ΓonEis defined inductively as follows. For e=
(xe−fe)∈C1,π(e)is the unique extension axiom (xe′−fe′)∈Esuch thatfe′=π(fe)
(uniqueness is ensured by the second condition). Here, π(fe)is defined via the action of Γ
onX. Fore∈Ci+1,π(e)is defined in the same way, where we use the fact that π(fe)is
defined by the induction hypothesis, as fe∈Ci.
▶Definition 21 (sym-EPC) .LetΓbe a group, Xbe a Γ-set, and let Fbe a field.
LetF⊆F[X]be a Γ-invariant unsatisfiable system of equations.
AΓ-symmetric EPCrefutationRofFis an EPCrefutation ofFsuch that the action of Γ
onXnaturally lifts to the setEof extension axioms appearing in R.
Note that this definition does not require all extension axioms in Eto actually play a role in
the refutation but they of course contribute to its size (i.e. proof length).
The graph isomorphism refutations that we need to simulate for Theorem 12 come from
[27, Theorem 1], and they are in deg3-sym-EPC for Γ =Aut(G)×Aut(H), whereGandH
are the two graphs to be distinguished. The following theorem shows that these refutations
can be simulated in sym-IPSLIN, which allows us to conclude the second statement of Theorem
12.
XX:20
▶Theorem 22. LetFbe a field and let Γbe a group such that either char(F) = 0, orFhas
positive characteristic and |Γ|andchar(F)are coprime. Let k∈N. Then
degk-sym-EPC≤psym-IPSLIN.
Proof.LetXbe a Γ-set and letF⊆F[X]be a Γ-invariant unsatisfiable polynomial system
of equations. Let Rbe a degk-sym-EPCrefutation ofFwith extension axioms E. Let
e1⪯e2⪯...⪯erandxe1⪯xe2⪯...⪯xerbe the hierarchical ordering of the extension
axioms and variables. We think of Ras a PC refutation of F∪E, and letCRbe theIPSLIN
refutation that p-simulates this PC refutation (which exists by [20, Proposition 3.4]).
It computes a polynomial CR(⃗ x,⃗ xe,⃗ y,⃗ ye)∈F[⃗ x,⃗ xe,⃗ y,⃗ ye]which is an IPS certificate of
unsatisfiability of F∪E. The semantic degree of CRis at mostkbecause each gate of CR
computes a polynomial p(⃗ x,⃗ xe,⃗ y,⃗ ye)such thatp(⃗ x,⃗ xe,⃗f,⃗ e)is a proof line of R. Hence,
deg(p(⃗ x,⃗ xe,⃗f,⃗ e))≤k, and deg(p(⃗ x,⃗ xe,⃗ y,⃗ ye))can only be smaller. Note also that F∪Eis a
Γ-invariant axiom system because the action of ΓonXnaturally lifts to E. Therefore, we
can apply Theorem 7 to CRand obtain a Γ-symmetric sym-IPSLINrefutationCsym
RofF∪E.
All steps so far increased the proof size at most polynomially, so we have |Csym
R|≤poly(|R|).
The circuit Csym
Rcomputes a polynomial in F[⃗ x,⃗ xe,⃗ y,⃗ ye], so we still need to get rid of
the⃗ xe- and⃗ ye-variables. We first define C′sym
Ras the circuit obtained from Csym
Rby
replacing the ⃗ ye-variables with the corresponding extension axioms xei−fei. Next, we
replace in order i= 1,...,revery extension-variable input gate xeiby a subcircuit computing
fei(⃗ x,⃗fe)∈F[X]. Call the resulting circuit Csym. This circuit is still ⃗ y-linear. To prove that
|Csym|≤poly(|Csym
R|)≤poly(|R|), we just need to see that each feiis computable with a
subcircuit of polynomial size. But this is clearly satisfied because we started with a degree- k
EPC refutation, so each feialso has degree≤k. Hence, it can be represented as a sum of
only polynomially many monomials. Now we show that Csymis indeed a refutation of ⃗f.
We have
Csym(⃗ x,⃗f) =CR(⃗ x,⃗fe,⃗f,⃗ e) =ϑCR(⃗ x,⃗ xe,⃗f,⃗ e) =ϑ1 = 1,
whereϑ:F[X∪XE]→F[X]denotes the operator which replaces in a given polynomial p
each extension variable xeiwith the polynomial fei(⃗ x,⃗fe). In the third equality, we use the
fact thatϑis a ring homomorphism, so ϑcommutes with the operations of the algebraic
circuit. Secondly,
Csym(⃗ x,⃗0) =CR(⃗ x,⃗fe,⃗0,⃗ e) =CR(⃗ x,ϑ⃗ xe,⃗0,ϑ⃗ e) =ϑCR(⃗ x,⃗ xe,⃗0,⃗0) =ϑ0 = 0.
Here, we made use of the fact that ϑei=ϑ(xei−fei) = 0for everyi∈[r], and again that ϑ
commutes with the operations of the circuit.
The final property we have to check is that CsymisΓ-symmetric. The circuit Csym
Ris
Γ-symmetric by construction, with respect to the action of ΓonX∪XE∪Y∪YE, where
XEdenotes the set of extension variables and YEthe set of input variables for the extension
axioms. In Csym, the input gates with labels in XE∪YEare replaced with subcircuits
computing the corresponding feiandei. BecauseEisΓ-invariant, these subcircuits can be
chosen so that they are symmetric to each other. That is, for each π∈Γ, and eachfei, the
subcircuit computing feiis mapped by πto the subcircuit computing πfei, and likewise for
the extension axioms ei. ◀
B Equivalence of bounded-degree IPS and PC
We provide details for the claim that on instances of constant degree, bounded-degree IPS
refutations can be simulated in bounded-degree PC. This is used in the proof of Theorem 13.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:21
▶Theorem 23. On instances of constant degree , we have the following relationships between
the bounded-degree fragments of the proof systems.1
bounded-degree PC≡pbounded-degree IPSLIN≡pbounded-degree IPS.
First, consider the equivalence bounded-degree PC≡pbounded-degree IPS LIN. This is
partially proved by [ 20, Proposition 3.4], which establishes p-equivalence between PC and
the so-called “determinantal” or “skew” IPSLIN. This is the restriction of IPSLINtoskew
circuits, in which each multiplication gate has fan-in ≤2and at least one of its inputs is an
input gate of the circuit. It can be easily seen that the p-simulation from [ 20, Proposition
3.4] is degree-preserving, up to the additive cost of the axiom degree in going from an
IPSLIN- to a PC-refutation (replacing ⃗ y-variables with the axioms they stand for). This
shows:bounded-degree PC≡pbounded-degree skew IPS LIN. Moreover, it trivially holds:
bounded-degree skew IPS LIN≤pbounded-degree IPS. Thus, it remains to prove that on
instances of constant degree, we also have:
bounded-degree IPS≤pbounded-degree skew IPS LIN.
This is dealt with in the following lemma.
▶Lemma 24. LetFbe a polynomial system of equations with deg(F)≤d.
If there exists a degk-IPSrefutationCofF, then there is also a skew ⃗ y-linear degdk-IPS
refutation of size at most O(|C|dk).
Proof.LetCbe a degk-IPSrefutation ofF⊆F[X]. The circuit Ccomputes the polynomial
C(⃗ x,⃗ y) =/summationtext
i∈Icimi(⃗ x,⃗ y), for distinct monomials mi∈F[X∪Y]. Since the degree of Cis
bounded by k, we have|I|=O((|X|+|Y|+ 1)k), and we can assume Cto be a circuit that
just represents this polynomial as a sum of monomials, so |C|=O((|X|+|Y|+1)k). To make
the circuit ⃗ y-linear, we replace in each monomial mi(⃗ x,⃗ y)with more than one ⃗ y-variable
all but one of them with subcircuits for the respective axioms. That is, the variable yjis
replaced with a circuit computing the axiom fj∈F. Call the resulting ⃗ y-linear circuit Clin.
Since deg(F)≤d, the degree of each subcircuit computing an axiom fjis at mostd. Thus,
the total degree of Clinis at mostdkbecauseC(⃗ x,⃗ y) =/summationtext
i∈Icimi(⃗ x,⃗ y)has degree≤k, and
inClin, each variable is replaced by a polynomial in F[X]of degree≤d. Furthermore, it
is clear by construction that Clin(⃗ x,⃗f) =C(⃗ x,⃗f) = 1. Also,Clin(⃗ x,⃗0) = 0because each of
the monomials in C(⃗ x,⃗ y)and hence also in Clin(⃗ x,⃗ y)contains at least one ⃗ y-variable (else,
C(⃗ x,⃗0)̸= 0, andCwould not be an IPS refutation). Thus, Clinis also an IPS refutation of
F. It remains to transform this into a skew circuit. We have
Clin(⃗ x,⃗ y) =/summationdisplay
i∈Ici·mi(⃗ x,yji,⃗f),
wheremi(⃗ x,yji,⃗f)denotes the monomial miwith all but one ⃗ y-variableyjireplaced with the
corresponding axiom. Each of the polynomials mi(⃗ x,yji,⃗f)has the form yji·qi(⃗ x)for some
qi∈F[X]. This expression can be computed by a skew circuit as follows: For each monomial
1The relationship between the degree bounds in PC and IPSLINis not the same in each direction of the
mutual simulation. This is because the degree of the axioms is counted in a PC refutation while in IPS,
each axiom just contributes degree 1, as it is replaced with a ⃗ y-variable.
XX:22
x1·...·xtinqi, computeyji·x1·...·xtby a sequence of tmany degree- 2multiplication
gates. Then take the sum over all these monomials to obtain yji·qi(⃗ x). Finally, take the
sum over all these ci·yji·qi(⃗ x), for alli∈I. This describes a skew ⃗ y-linear degree- dkcircuit
computingClin(⃗ x,⃗ y). Its size is at most O((|X|+|Y|+ 1)dk)because every mi((⃗ x,yji,⃗f)has
degree at most dk, so this is the maximum number of monomials we have to compute. By
our definition of IPS proof size (see Section 3.2), |C|≥|X|+|Y|, so this is inO(|C|dk)◀
C Upper bound results
C.1 Cai-Fürer-Immerman equations
We recall the set-up from Section 6.1.
▶Definition 14 (CFI equations) .LetG= (V,E)be a 3-regular undirected connected graph.
Letu∈V(G)be some fixed distinguished vertex and let a∈{0,1}. The variable set is
X={xe
i|e∈E,i∈F2}. The equations are
xe
i+xf
j+xg
k=i+j+kmod 2 for everyv∈V\{u},{e,f,g}=E(v),
and everyi,j,k∈F2
xe
i+xf
j+xg
k=i+j+k+amod 2 for vertexu,{e,f,g}=E(u),
and everyi,j,k∈F2
xe
0+xe
1= 1 for everye∈E
This, together with the Boolean axioms for every variable, is the linear equation system
FCFI(G,u,a )overF2.
The⃗ y-variables associated with these equations are:
Y:={yv[e∝⇕⊣√∫⊔≀→i,f∝⇕⊣√∫⊔≀→j,g∝⇕⊣√∫⊔≀→k]|v∈V,i,j,k∈F2,{e,f,g}=E(v)}
⊎{ye|e∈E}
⊎{yBool[e,i]|e∈E(v),i∈F2}.
The symmetry group we consider is the subgroup Γof the Boolean vector space (FE
2,⊕)
which consists only of those vectors πsuch that/summationtext
e∈E(v)π(e) = 0 mod 2for everyv∈V.
The action of this group on Xis given by π(xe
i) =xe
i+πe, where addition is in F2, andπe
denotes the entry of πat indexe∈E. The corresponding action on Yis:
π(yv[e∝⇕⊣√∫⊔≀→i,f∝⇕⊣√∫⊔≀→j,g∝⇕⊣√∫⊔≀→k]) =yv[e∝⇕⊣√∫⊔≀→i+πe,f∝⇕⊣√∫⊔≀→j+πf,g∝⇕⊣√∫⊔≀→k+πg],
π(ye) =ye, andπ(yBool[e,i]) =yBool[e,i+πe]. We now prove:
▶Theorem 15. Let(Gn)n∈Nbe an arbitrary family of 3-regular graphs, and let Γnbe the
subgroup of FE(Gn)
2defined above. For every n∈N, there exists a non-⃗ y-linear Γn-sym-IPS-
refutation over F2of the unsatisfiable equation system FCFI(Gn,un,1)(regardless of the
choice ofun∈V(Gn)), which has size at most poly(|FCFI(Gn,un,1)|).
In the following, we say that a monomial contains a conflictif for somee∈E, it contains
bothxe
0andxe
1. It follows from the edge equations that such a conflict-monomial evaluates
to zero. This is also derivable with a small symmetric circuit:
▶Lemma 25. For every edge e∈E, there is a constant-size Γ-symmetric circuit Ce01such
thatCe01(⃗ x,FCFI(G,u, 1)) =xe
0xe
1andCe01(⃗ x,⃗0) = 0.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:23
Proof.We can write
Ce01(⃗ x,⃗ y) =ye·xe
0xe
1+yBool[e,0]·xe
1+yBool[e,1]·xe
0.
LetCe01be the circuit that computes the polynomial exactly in this way. It is easy to see
that this is symmetric under flipping e(i.e. under the unit vector in Γwith a 1at indexe)
becauseyeis fixed by this edge flip. Flipping other edges has no effect on this circuit. When
they-variables are substituted with the axioms, this becomes in F2:
Ce01(⃗ x,FCFI(G,u,1)) = (xe
0+xe
1+ 1)·xe
0xe
1+ ((xe
0)2+xe
0)·xe
1+ ((xe
1)2+xe
1)·xe
0=xe
0xe
1.
◀
In the following, when we consider a vertex v∈V, we always call its incident edges e,f
andg. We introduce the shorthand notation JP?K, for a Boolean predicate P. This evaluates
to1ifPholds, and 0otherwise. For every v∈V, define:
τ(v) :=/summationdisplay
(i,j,k)∈F3
2
i+j+k=Jv̸=u?Kmod 2xe
ixf
jxg
k+ 1
˜τ(v) :=/summationdisplay
(i,j,k)∈F3
2
i+j+k=Jv=u?Kmod 2xe
ixf
jxg
k
▶Lemma 26. For eachv∈V, there exist polynomial-size circuits Cvand/tildewideCvsuch that
1.Cv(⃗ x,FCFI(Gn,un,1)) =τ(v)and/tildewideCv(⃗ x,FCFI(Gn,un,1)) = ˜τ(v).
2.Cv(⃗ x,⃗0) = 0and/tildewideCv(⃗ x,⃗0) = 0.
3.Cvand/tildewideCvareΓ-symmetric.
Proof.We define the following polynomials, each of which is obviously computable by a
Γ-symmetric circuit with one multiplication gate.
C′
v(⃗ x,⃗ y) :=/productdisplay
(i,j,k)∈F3
2
i+j+k=Jv̸=u?Kmod 2yv[e∝⇕⊣√∫⊔≀→i,f∝⇕⊣√∫⊔≀→j,g∝⇕⊣√∫⊔≀→k].
/tildewideC′
v(⃗ x,⃗ y) :=/productdisplay
(i,j,k)∈F3
2
i+j+k=Jv̸=u?Kmod 2yv[e∝⇕⊣√∫⊔≀→i,f∝⇕⊣√∫⊔≀→j,g∝⇕⊣√∫⊔≀→k].
Both these circuits evaluate to zero if the ⃗ y-variables are substituted with zero. When we
substitute the CFI axioms for the ⃗ y-variables, we get the following expression (taking into
account that any monomial with an even number of occurrences is cancelled):
C′
v(⃗ x,FCFI(G,u, 1)) = 1 +/summationdisplay
i+j+k=Jv̸=u?K(xe
i)2xf
jxg
k+xe
i(xf
j)2xg
k+xe
ixf
j(xg
k)2
+/summationdisplay
{a,b}⊆E(v),i,j∈F2
a̸=bxa
ixb
j+ (xa
i)2xb
j+xa
i(xb
j)2+/summationdisplay
a∈E(v),i∈F2(xa
i)2
+xe
0xe
1·/parenleftig
xe
0xe
1+/summationdisplay
i,j∈F2(xf
i)2+ (xg
j)2+ (xf
i+xg
i)·(xe
0+xe
1)/parenrightig
+xf
0xf
1·/parenleftig
xf
0xf
1+/summationdisplay
i,j∈F2(xe
i)2+ (xg
j)2+ (xe
i+xg
i)·(xf
0+xf
1)/parenrightig
+xg
0xg
1·/parenleftig
xg
0xg
1+/summationdisplay
i,j∈F2(xe
i)2+ (xf
j)2+ (xe
i+xf
i)·(xg
0+xg
1)/parenrightig
.
XX:24
To obtainτ(v)from this expression, we have to do the following. First, replace each monomial
of the form (xe
i)2xf
jxg
kwith its multilinearised version. This can be done by multiplying the
respective Boolean axiom for the squared variable with the other variables in the monomial
and adding the result to the sum. It can be seen that doing this in the obvious way does not
break Γ-symmetries. Next, we want to cancel all monomials in the second line of the above
expression. To do this, we again multilinearise everything using the Boolean axioms. Then,
for every 2-element subset{a,b}⊆E(v), we add the product ya·ybto the sum. When these
y-variables are replaced with the edge axioms (xa
0+xa
1+ 1)·(xb
0+xb
1+ 1), then this cancels
all degree- 2monomials in line 2and adds a +1to the sum. The degree- 1monomials that
are added this way are cancelled automatically because each degree- 1monomial is added
twice. Thus, we still have to cancel/summationtext
a∈E(v),i∈F2xa
i(after it has been multilinearised). This
can be done by adding all the three edge axioms yafora∈E(v), that is, (xa
0+xa
1+ 1).
This introduces another +1, so it cancels the one that was introduced when eliminating the
degree- 2monomials. All of this is Γ-symmetric.
Finally, to cancel the last three lines, we use the symmetric circuits Ce01,Cf01,Cg01from
Lemma 25, and multiply them with the correct polynomial that appears in the expression
above. This is also Γ-symmetric. The sum of C′
vand all the described auxiliary circuits is
thenCv. In particular, all the added auxiliary circuits evaluate to zero when the y-variables
are set to zero because all ⃗ x-polynomials are always multiplied with y-variables in them.
For the other circuit, we get:
/tildewideC′
v(⃗ x,FCFI(G,u, 1)) =/summationdisplay
i+j+k=Jv=u?K(xe
i)2xf
jxg
k+xe
i(xf
j)2xg
k+xe
ixf
j(xg
k)2
+xe
0xe
1·/parenleftig
xe
0xe
1+/summationdisplay
i,j∈F2(xf
i)2+ (xg
j)2+ (xf
i+xg
i)·(xe
0+xe
1)/parenrightig
+xf
0xf
1·/parenleftig
xf
0xf
1+/summationdisplay
i,j∈F2(xe
i)2+ (xg
j)2+ (xe
i+xg
i)·(xf
0+xf
1)/parenrightig
+xg
0xg
1·/parenleftig
xg
0xg
1+/summationdisplay
i,j∈F2(xe
i)2+ (xf
j)2+ (xe
i+xf
i)·(xg
0+xg
1)/parenrightig
.
We can proceed similarly as with Cvto obtain ˜τ(v)from this by adding Γ-symmetric circuits
to it. ◀
Note that the circuits Cvand/tildewideCvare clearly not ⃗ y-linear.
The CFI equation system is related to the so-called Tseitin equations . In the Tseitin
equation system defined by (G,u, 1), we have only one equation for each v∈V, instead of
eight. LetE(v) ={e,f,g}. We identify the variables of this equation system with the edges.
The Tseitin equation for every v̸=ureads
e+f+g= 0,
and for the special vertex uwe have the equation:
e+f+g= 1,
Now fix any linear ordering <onVand letv1,v2,...,vnbe the enumeration of Vaccording
to<. Letµ1:=τ(v1)and˜µ1:= ˜τ(v1).
Fori∈[n], letWi:={v1,...,vi}, andEi:=/uniontext
w∈WiE(w). LetSol1(Wi)be the set of all
assignments λ:Ei→F2which are a correct solution for an odd number of Tseitin equations
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:25
for vertices in Wi. Similarly, Sol0(Wi)is the set of all λ:Ei→F2that are correct solutions
for an even number of Tseitin equations for vertices in Wi.
For all 1<i≤n, define
µi:=/summationdisplay
λ∈Sol0(Wi)/productdisplay
e∈Ei(xe
λ(e))κ(e)+ 1.
˜µi:=/summationdisplay
λ∈Sol1(Wi)/productdisplay
e∈Ei(xe
λ(e))κ(e).
The exponent κ(e)denotes how many endpoints of eare inWi, so this is either one or two.
▶Lemma 27. For eachi∈[n], there exist polynomial-size circuits Ciand/tildewideCisuch that
1.Ci(⃗ x,FCFI(Gn,un,1)) =µiand/tildewideCi(⃗ x,FCFI(Gn,un,1)) = ˜µi.
2.Ci(⃗ x,⃗0) = 0and/tildewideCi(⃗ x,⃗0) = 0.
3.Ciand/tildewideCiareΓ-symmetric.
Once we have this, we are done. The following proves Theorem 15.
▶Corollary 28. There is a polynomial-size Γ-symmetric IPS-refutation forFCFI(G,u, 1).
Proof.The circuit for µnis the desired refutation. We have µn= 1because Sol0(Wn) =
Sol0(V)is empty. This can be seen as follows: Since Gis3-regular,|V|must be even.
Thus, for each assignment λ:E→F2inSol0(V), there exists a partition V=V0⊎V1with
|V0|≡|V1|≡0mod 2such thatλcorrectly solves the Tseitin equations for every vertex in
V0and is incorrect for the Tseitin equation for each v∈V1. Such aλcannot exist: Suppose
u∈V0. The rhs of the Tseitin equations for V0sum up to 1then. The lhs of these equations
then also sum up to 1underλ. Semantically, the sum over the lhs is the sum over all e∈E
in the cut between V0andV1. Thus, also the lhs and the rhs of the equations for vertices in
V1must sum to 1. However, λdoes not satisfy any equation for vertices in V1, so they all
evaluate to 1(becauseu /∈V1). Since|V1|is even, the sum over these equations is thus 0
and not 1. We can argue symmetrically if u∈V1. ◀
Now let us prove Lemma 27.
Proof.We construct the circuits Ciand/tildewideCiby induction on i. The casei= 1is handled by
Lemma 26. To compute µiand˜µifori>1, we define the following circuits:
Ci:=µi−1·τ(vi) +µi−1+τ(vi) + ˜µi−1·˜τ(vi).
/tildewideCi:=µi−1·˜τ(vi) + ˜τ(vi) + ˜µi−1·τ(vi) + ˜µi−1.
Forµi−1,˜µi−1,τ(v),˜τ(v)we use the circuits we have by induction and by Lemma 26.
It directly follows from the induction hypothesis and from Lemma 26 that Ciand/tildewideCi
are both Γ-symmetric. Likewise, item 2 follows from these. It remains to check that
µi−1·τ(vi)+µi−1+τ(vi)+˜µi−1·˜τ(vi) =µi(and symmetrically for ˜µi). First of all, note that
the summands µi−1+τ(vi)inCiare just there to cancel out the summands in µi−1·τ(vi)
that arise because both µi−1andτ(vi)contain the summand 1.
By definition of the τ- andµ-polynomials, the monomials in µi−1·τ(vi) +µi−1+τ(vi)which
do not contain a conflict are in bijection with the set of assignments λ:Ei→F2which
do not satisfy the Tseitin equation for viand satisfy an even number of Tseitin equations
for vertices in Wi−1. Similarly, the conflict-free monomials in ˜µi−1·˜τ(vi)are those which
code an assignment satisfying the equation for viand an odd number of vertex equations
XX:26
inWi−1. In total, these monomials code all assignments that satisfy an even number of
Tseitin equations for vertices in Wi. Note that each of these monomials appears exactly
once in the sum, so it is not cancelled. Also, the exponent κ(e)for anyein the cut between
Wi−1and{vi}is2, as required. Each monomial in Ci(⃗ x,FCFI(G,u, 1))that contains a
conflict appears an even number of times and thus cancels itself: Let mbe such a monomial.
Then letxe1
0xe1
1xe2
0xe2
1...xek
0xek
1for edges{e1,...,ek}in the cut between viandWi−1be the
submonomial of mcontaining exactly its conflicts. We show that mappears exactly 2k≡0
mod 2times inCi(⃗ x,FCFI(G,u, 1)): LetF⊆{e1,...,ek}be any subset of the conflicting
edges inm. LetE∗
i:= (Ei\{e1,...,ek})⊎{(e1,v),(e1,W)...,(ek,v),(ek,W)}. That is, we
“double” the conflicting edges and introduce one variable for each of its endpoints. Then let
λF:E∗
i→F2be the assignment which is as encoded by mon the non-conflicting edges, and
for each conflicting edge ei,λF(ei,v) := 1iffei∈F, andλF(ei,W) := 1−λF(ei,v). We
define amodified version of the Tseitin equations for the vertices Wi−1∪viover variables E∗
i:
In the equation associated with vi, every variable ej∈{e1,...,ek}is replaced by (ej,v). In
every other equation, every occurrence of a variable ej∈{e1,...,ek}is replaced by (ej,W).
The other variables remain the same.
Claim: For eachF⊆ {e1,...,ek},λFis either a correct solution for the modified vi-
Tseitin-equation and for an odd number of modified Wi−1-equations, or it is incorrect for the
modifiedvi-equation and correct for an even number of modified Wi−1-equations.
Proof of claim. For at least one F, this must be true because otherwise, mwould not appear
inCi(⃗ x,FCFI(G,u,1)): The fact that mappears inCi(⃗ x,FCFI(G,u,1))means that for every
ej∈{e1,...,ek}, one of{xej
0,xej
1}appears inµi−1and the other in τ(vi), or one appears in
˜µi−1and the other in ˜τ(vi). By the semantics of µandτ, this is exactly the statement of the
claim for this particular F. To show that the claim is true for every other F′⊆{e1,...,ek}
as well, we argue that whenever the claim holds for some λF, it also holds for λF△{ej}, for
anyj∈[k]: Swapping the values of (ej,v)and(ej,W)means that the satisfaction status of
the modified vi-equation is changed, and also the satisfaction status of the modified equation
for one vertex in Wi−1is changed. Hence, the claim also holds for λF△{ej}, and by repeating
this, it holds for every F⊆{e1,...,ek}.◀
Because of the claim, for each F⊆ {e1,...,ek},λFdescribes a distinct occurrence of
the monomial m(that is, a distinct way to compute it) in µi−1·τ(vi) +˜µi−1·˜τ(vi)(again by
the semantics of µi−1andτ(vi)). Thus,mappears indeed exactly 2ktimes and is therefore
cancelled. In total, we have proved Lemma 27. ◀
The construction of the circuits Ciand/tildewideCiin the above proof is based on the same idea as
the hereditarily finite sets called µandτin the CPT-algorithm from [ 13]. Both settings
are quite different, but in both cases, µisymbolises that a certain aggregated parity in the
subinstance on Wiis even, and ˜µistands for the odd parity.
Symmetric linear refutation
Next, we construct a ⃗ y-linear symmetric refutation for the CFI equations, thus proving
▶Theorem 16. Let the setting be as in Theorem 15. For every n∈N, there exists a
Γn-sym-IPSLIN-refutation over F2of the unsatisfiable equation system FCFI(Gn,un,1), which
has size at mostO(2|En|).
For the proof, we assume as before that we have fixed some ordering <onV. This
extends to an ordering on the edges as well, and we can enumerate them E=e1,e2,...,em.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:27
We define the following Γ-symmetric polynomial
B(⃗ x,⃗ y) :=ye1+ye2·(xe1
0+xe1
1) +ye3·(xe1
0xe2
0+xe1
1xe2
0+xe1
1xe2
1+xe1
0xe2
1) +...
+yem·/parenleftig/summationdisplay
(i1,...,im−1)∈Fm−1
2xe1
i1·...·xem−1
im−1/parenrightig
▶Lemma 29. The polynomial B(⃗ x,⃗ y)is⃗ y-linear and satisfies:
B(⃗ x,⃗0) = 0.
B(⃗ x,FCFI(G,u, 1)) = 1 +/summationtext
(i1,...,im)∈Fm
2xe1
i1·...·xem
im.
There exists a Γ-symmetric circuit Bwith|B|≤poly(|FCFI(G,u, 1)|)that computes
B(⃗ x,⃗ y).
Proof.The fact that Bis⃗ y-linear and the first property are easy to see. For the second
property, note that B(⃗ x,FCFI(G,u, 1))is a telescoping sum. The i-th summand introduces
all monomials encoding Boolean assignments to the edges {e1,...,ei}, and it also cancels
all assignments to the edges {e1,...,ei−1}, which remain from the (i−1)st summand. The
ends of this telescope sum are 1and the sum over all assignments to all edges. To compute
B(⃗ x,⃗ y)with a polynomial-size circuit, we have to compute the sum/summationtext
(i1,...,ij)∈Fj
2xe1
i1·...·xej
ij,
for eachj∈[m−1], with a polynomial-size circuit. This can be done by writing it as the
product/producttextj
i=1(xei
0+xei
1). ◀
Next, we show how to cancel all monomials except 1inB(⃗ x,FCFI(G,u, 1)). LetA:={λ:
E→F2}denote the set of all total assignments of Boolean values to edges. The group Γ
acts onAin the sense that π(λ)(e) =λ(e) +πefor everyπ∈Γ,e∈E. If we partition Ainto
itsΓ-orbits, we see that each Γ-orbit Ω⊆Ais characterised by the set W⊆Vof vertices at
which the assignments in Ωare correct solutions for the Tseitin equations:
▶Lemma 30. For every Γ-orbit Ω⊆A, there exists a W⊆Vsuch that
Ω ={λ∈A|∀v∈V:λsolves the Tseitin equation for viffv∈W}.
Proof.Everyπ∈Γflips an even number of incident edges at every v∈Vand hence, π
cannot change the set of vertices for which λ∈Ais a correct Tseitin solution. Conversely, if
twoλ,λ′∈Aare correct Tseitin solutions for exactly the same vertices W⊆V, then there
is aπ∈Γwithπ(λ) =λ′. Indeed, let F⊆Ebe the set of edges at which λandλ′differ.
Every vertex in Vis incident to an even number of edges in F; otherwise, there would be a
vertex whose Tseitin equation is solved by λbut not by λ′. Thus, the Boolean vector πF,
which flips exactly the edges in F, is in Γ, andπF(λ) =λ′. ◀
Thus, we denote each orbit of AasΩW, for the appropriate W⊆Vthat characterises
the orbit in the sense of the above lemma.
▶Lemma 31. There exists no Γ-orbit Ω∅⊆A.
Proof.The orbit Ω∅contains all assignments λ∈Awhich do not solve any Tseitin equation
correctly. But such an assignment does not exist, for the same reason why the Tseitin
equations are unsatisfiable. Since Gis3-regular and hence |V|is even, the sum over the
inverses of the right hand sides of all Tseitin equations is 1modulo 2. Thus, for an assignment
λthat satisfies none of the Tseitin equations, we would have
/summationdisplay
v∈V
{e,f,g}=E(v)λ(e) +λ(f) +λ(g) = 1 mod 2
XX:28
But this is impossible because every edge in Eappears exactly twice in this sum, so it must
be even. ◀
We group the orbits ΩW⊆Atogether, using the total order v1,v2,...,vnon the vertices.
LetO1:={ΩW|v1∈W}. Fori>1, letOi:={ΩW|vi∈Wandvj/∈Wfor allj <i}.
Due to Lemma 31, each orbit appears in one Oi, and by the definition of the Oi, it appears
in exactly one of them. The set Aand hence also the set of non-constant monomials in
the sumB(⃗ x,FCFI(G,u, 1))is thus partitioned into the Oi(some of which may be empty
but this does not matter). For simplicity, we also write Oifor/uniontextOi, i.e. treat each Oias a
set of assignments rather than a set of sets of assignments. If λ:E′→F2is some Boolean
assignment to a subset of the edges, we write m(λ) :=/producttext
e∈E′xe
λ(e)for the monomial that
naturally encodes this. For every Oi, and every triple (j,k,ℓ )∈F3
2withj+k+ℓ=Jvi=u?K
mod 2, we define the polynomial
A(j,k,ℓ)
i (⃗ x):=xe
jxf
kxg
ℓ·/parenleftig/summationdisplay
λ:E\{e,f,g}→F2
λ∪(e∝⇕⊣√∫⊔≀→j,f∝⇕⊣√∫⊔≀→k,g∝⇕⊣√∫⊔≀→ℓ)∈Oim(λ)/parenrightig
.
Here,{e,f,g}=E(vi). Also, we define a version of this where the edges {e,f,g}are missing:
A′(j,k,ℓ)
i (⃗ x):=/summationdisplay
λ:E\{e,f,g}→F2
λ∪(e∝⇕⊣√∫⊔≀→j,f∝⇕⊣√∫⊔≀→k,g∝⇕⊣√∫⊔≀→ℓ)∈Oim(λ).
In the following, we mean by Stab (e,f,g )the subgroup of Γconsisting of all vectors which
do not flip any of the edges e,f,g.
▶Lemma 32. For everyi∈[n]and every (j,k,ℓ )∈F3
2withj+k+ℓ=Jvi=u?Kmod 2,
the polynomials A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x)are computable by Stab (e,f,g )-symmetric circuits
of sizeO(|Oi|). Moreover, these circuits are such that every π∈Γ\Stab (e,f,g )maps the
circuits for A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x), respectively, to the circuits for A(j+πe,k+πf,ℓ+πg)
i (⃗ x)
andA′(j+πe,k+πf,ℓ+πg)
i (⃗ x).
Proof.The set of assignments L:={λ:E\{e,f,g}→F2|λ∪(e∝⇕⊣√∫⊔≀→j,f∝⇕⊣√∫⊔≀→k,g∝⇕⊣√∫⊔≀→ℓ)∈Oi}
is the projection to E\{e,f,g}of all assignments in Oiwith certain prescribed values at
e,f,g. SinceOiis a union of Γ-orbits, every π∈Stab (e,f,g )stabilisesL. Thus, the natural
depth-2-circuit that computes the sum over all assignments in Las a sum of products is
Stab (e,f,g )-symmetric. It requires the computation of at most |Oi|monomials, so this
is an upper bound on its size. For A(j,k,ℓ)
i (⃗ x), we have to multiply the result by xe
jxf
kxg
ℓ,
which still results in a Stab (e,f,g )-symmetric circuit. The additional statement that every
π∈Γ\Stab (e,f,g )maps the circuits for A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x)to the circuits for
A(j+πe,k+πf,ℓ+πg)
i (⃗ x)andA′(j+πe,k+πf,ℓ+πg)
i (⃗ x), is true because this holds for the polynomials
A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x)themselves. ◀
The above lemma is the only place where we incur the exponential cost of the refutation.
We do not know if there are more efficient ways to compute A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x). The
difficulty is that the assignments in Oiall have the property that they do not satisfy the
Tseitin equation for any vjwithj <i. That is, we do not want all assignments here, and not
even all assignments that satisfy an even number of Tseitin equations. The polynomial size
non-⃗ y-linear circuit we constructed in the proof of Lemma 27 combined local assignments to
the incident edges of each vertex to obtain the sum over exponentially many assignments to
all vertices. In that case, incompatible local assignments cancelled because they appeared an
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:29
even number of times. Here, we would have to take the product over the local assignments
toE(vj)that do not satisfy the Tseitin equation for vj, for everyj <i. But we do not see a
way to efficiently remove the monomials involving conflicts that would arise in this way (in
particular, every monomial involving a conflict would be computed only once and would not
cancel directly).
Now we multiply the polynomials A(j,k,ℓ)
i (⃗ x)andA′(j,k,ℓ)
i (⃗ x)in a suitable way with y-
variables in order to obtain an IPS certificate. We define for every i∈[n]the following
polynomial.
Ci(⃗ x,⃗ y):=/summationdisplay
(j,k,ℓ)∈F3
2
j+k+ℓ=Jvi=u?K/parenleftig
A(j,k,ℓ)
i (⃗ x)·yvi[e∝⇕⊣√∫⊔≀→j,f∝⇕⊣√∫⊔≀→k,g∝⇕⊣√∫⊔≀→ℓ]
+A′(j,k,ℓ)
i (⃗ x)·(yBool[e,j]·xf
kxg
ℓ
+yBool[f,k]·xe
jxg
ℓ+yBool[g,ℓ]·xe
jxf
k)/parenrightig
.
▶Lemma 33. The polynomial Ci(⃗ x,⃗ y)is⃗ y-linear and satisfies:
Ci(⃗ x,⃗0) = 0.
Ci(⃗ x,FCFI(G,u, 1)) =/summationtext
λ∈Oim(λ).
Cican be computed by a Γ-symmetric circuit of size O(|Oi|).
Proof.The first property is easy to see. For the second property, note that the sum/summationtext
(j,k,ℓ)∈F3
2
j+k+ℓ=Jvi=u?KA(j,k,ℓ)
icontainsm(λ)for everyλ∈Oi: Everyλ∈Oiis a correct solution
for the Tseitin equation at vertex vi, and (j,k,ℓ )ranges over all correct solutions for the
vi-equation. We see that A(j,k,ℓ)
i·yvi[e∝⇕⊣√∫⊔≀→j,f∝⇕⊣√∫⊔≀→k,g∝⇕⊣√∫⊔≀→ℓ]gives usm(λ), for every λ∈Oi
that sends (e,f,g )to(j,k,ℓ )exactly thrice: Once with xe
jsquared, once with xf
ksquared,
and once with xg
ℓsquared. The respective Boolean axioms are used to multilinearise all these
monomials. Since each monomial appears thrice, we get each monomial exactly once after
addition in F2.
TheΓ-symmetric circuit for Ci(⃗ x,⃗ y)looks exactly like the definition of Ci(⃗ x,⃗ y), where we
use the respective Stab (e,f,g )-symmetric circuits from Lemma 32 to compute A(j,k,ℓ)
i (⃗ x)
andA′(j,k,ℓ)
i (⃗ x). In total, this is a Γ-symmetric circuit because any π∈Γ\Stab (e,f,g )just
permutes the summands of the sum/summationtext
(j,k,ℓ)∈F3
2
j+k+ℓ=Jvi=u?K..., and the circuits for computing each
summand are indeed mapped to each other by the action of π(as mentioned in Lemma 32).
The size of the circuit for Ciis a constant factor times the sizes of the circuits for A(j,k,ℓ)
i (⃗ x)
andA′(j,k,ℓ)
i (⃗ x), which areO(|Oi|)by Lemma 32. ◀
Putting all this together, we get
1 =B(⃗ x,FCFI(G,u, 1)) +n/summationdisplay
i=1Ci(⃗ x,FCFI(G,u, 1)).
This is a⃗ y-linear refutation for FCFI(G,u, 1), and by Lemmas 29 and 33, it is computable by
aΓ-symmetric circuit. Its size is dominated by the Ci. Their sizes sum up to O/parenleftig/summationtext
i|Oi|/parenrightig
=
O(2|E|), as theOipartition the set of all 2|E|many assignments λ:E→F2.
XX:30
C.2 Subset sum
▶Theorem 18. The polynomial equation system Fsum(⃗ x)(n,F,β)has a Symn-sym-IPSLIN-
refutation of size at most poly(|Fsum(n,F,β)|), for alln,F,βsuch that the system is unsat-
isfiable. The same is true for Fsum(⃗ x⃗ y)(n,F,β). Moreover, there is no constant k∈Nsuch
thatdegk-IPScan refuteFsum(⃗ x)(n,F,β)andFsum(⃗ x⃗ y)(n,F,β)for alln∈N.
Proof.We first deal with the case of Fsum(⃗ x)(n,F,β)and explain in the end, how the proof
lifts toFsum(⃗ x⃗ y)(n,F,β). In Proposition B.1 in the appendix of [ 16], the key part of an IPS
refutation ofFsum(⃗ x)(n,F,β)is explicitly constructed. The authors show that the axiom/summationtextn
i=1xi−βhas to be multiplied with the polynomial
f(⃗ x) =−n/summationdisplay
k=0k!
/producttextk
j=0(β−j)Sn,k,
where
Sn,k=/summationdisplay
S⊆[n]
|S|=k/productdisplay
i∈Sxi
is thek-th elementary symmetric polynomial. Concretely, [ 16, Proposition B.1] states that
f(⃗ x)·/parenleftig/summationtextn
i=1xi−β/parenrightig
is equal to 1on all Boolean assignments to ⃗ x, and that moreover, f(⃗ x)
is the unique polynomial with that property. The uniqueness of fand the fact that its degree
is unbounded already proves that the bounded-degree IPS cannot refute Fsum(n,F,β)for all
n∈N. To obtain the polynomial-size symmetric refutation, two things remain to be shown.
Firstly, that the elementary symmetric polynomials are computable by Symn-symmetric
polynomial-size circuits; secondly, we need to work out how to combine the Boolean axioms
withf(⃗ x)·/parenleftig/summationtextn
i=1xi−β/parenrightig
in order to obtain 1. The efficient symmetric computability of
theSn,kis shown in [ 33]. Regarding the Boolean axioms, we know by [ 16, Proposition
B.1] thatf(⃗ x)·/parenleftig/summationtextn
i=1xi−β/parenrightig
= 1 +b(⃗ x), whereb(⃗ x)is a polynomial that can be written
as/summationtextn
i=1(x2
i−xi)·pi(⃗ x), for appropriate polynomials pi. These are the ones we need to
determine. We claim that the right choice is
pi:=/parenleftign/summationdisplay
k=1−k!
/producttextk
j=0(β−j)Sn\i,k−1/parenrightig
,
where
Sn\i,k=/summationdisplay
S⊆[n]\{i}
|S|=k/productdisplay
j∈Sxj.
Now we verify that for this choice of pi, we get/summationtextn
i=1(x2
i−xi)·pi(⃗ x) =b(⃗ x).
n/summationdisplay
i=1(x2
i−xi)·pi(⃗ x) =/summationdisplay
i∈[n]n/summationdisplay
k=1−k!
/producttextk
j=0(β−j)Sn,k,i2
+n/summationdisplay
k=1k·k!
/producttextk
j=0(β−j)Sn,k, (⋆)
where
Sn,k,i2=/summationdisplay
S⊆[n]
|S|=k,i∈Sx2
i/productdisplay
j∈S\{i}xj.
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:31
To see this, note that every degree- klinear monomial min/summationtextn
i=1(x2
i−xi)·pi(⃗ x)is obtained
inkdifferent ways, for exactly the kchoices ofi∈[n]such thatxiappears in m. Now we
computeb(⃗ x)and see that it matches:
/parenleftign/summationdisplay
i=1xi−β/parenrightig
·f(⃗ x) =/parenleftign/summationdisplay
i=1xi−β/parenrightig
·/parenleftig
−n/summationdisplay
k=0k!
/producttextk
j=0(β−j)Sn,k/parenrightig
=/summationdisplay
i∈[n]n/summationdisplay
k=1−k!
/producttextk
j=0(β−j)Sn,k,i2
+n/summationdisplay
k=1−k·(k−1)!
/producttextk−1
j=0(β−j)Sn,k+n/summationdisplay
k=0β·k!
/producttextk
j=0(β−j)Sn,k
Now combining the coefficients in the last line, we get
−k·(k−1)!
/producttextk−1
j=0(β−j)+β·k!
/producttextk
j=0(β−j)=k·k!
/producttextk
j=0(β−j).
Therefore, in total we have the following result which matches (⋆).
/parenleftign/summationdisplay
i=1xi−β/parenrightig
·f(⃗ x) = 1 +/summationdisplay
i∈[n]n/summationdisplay
k=1−k!
/producttextk
j=0(β−j)Sn,k,i2+n/summationdisplay
k=1k·k!
/producttextk
j=0(β−j)Sn,k.
Hence,pi(⃗ x)as defined above is correct. Let Stab (i)denote the pointwise stabiliser of i
inSymn. There exists a Stab (i)-symmetric polynomial-size circuit for computing pi(⃗ x)
becauseSn\i,kis computable by a Stab (i)-symmetric polynomial-size circuit: By renaming
of variables, we can view Sn\i,kasSn−1,k, and we know by [ 33] that this has an efficient
Symn−1-symmetric circuit. So in total, f(⃗ x), andpi(⃗ x), for everyi∈[n], are the coefficients
of the⃗ y-variables in a Symn-symmetric polynomial-size sym-IPSLINrefutation.
To construct a refutation for Fsum(⃗ x⃗ y)(n,F,β), let us rename the variables of f(⃗ x)to
z1,...,zn. Thenf(⃗ z)·/parenleftig/summationtext
i∈[n]zi−β/parenrightig
= 1 +b(⃗ z), wherebis the polynomial from above.
Substituting zi∝⇕⊣√∫⊔≀→xiyi, wegetthat f(x1y1,...,xnyn)·/parenleftig/summationtext
i∈[n]xiyi−β/parenrightig
= 1+b(x1y1,...,xnyn).
By what we showed above, b(x1y1,...,xnyn) =/summationtextn
i=1(x2
iy2
i−xiyi)·pi(x1y1,...,xnyn). Thus,
our refutation uses the symmetric circuits we have constructed for f(⃗ z)and for the pi(⃗ z),
where we simply replace every input gate ziwith the product xiyi. This is still symmetric
with respect to the simultaneous action of Symnon⃗ x⃗ y. It just remains to compute the
polynomials (x2
iy2
i−xiyi)used inb(x1y1,...,xnyn)from the Boolean axioms (x2
i−xi)and
(y2
i−yi). The following equation expresses (x2
iy2
i−xiyi)as aStab (i)-symmetric circuit in
the Boolean axioms (x2
i−xi)and(y2
i−yi).
(x2
iy2
i−xiyi) = (x2
i−xi)y2
i+ (y2
i−yi)x2
i−(x2
i−xi)(y2
i−yi)
For eachi∈[n], letBx
idenote the variable of the IPS certificate that stands for the Boolean
axiom (x2
i−xi), andletBy
ibethevariablefor (y2
i−yi)(giventhattheusualconventionofusing
yfor the axiom variables would clash with the actual ⃗ y-variables of the instance here). For
eachi∈[n], therefutationcontains Bx
i·(2y2
i−yi)·pi(x1y1,...,xnyn)+By
i·x2
i·pi(x1y1,...,xnyn).
This is linear in the Bi-variables, and yields in total a certificate that is symmetric with
respect to the simultaneous action of Symnon⃗ xand⃗ y(note that it is not symmetric under
exchanging xiandyi, but our symmetry group does not allow this action).
XX:32
Finally, the fact that Fsum(⃗ x⃗ y)(n,F,β)admits no constant-degree refutations follows
e.g. from [ 16, Corollary 5.9] which yields an exponential lower bound on depth-3 powering
formulas – a constant-degree refutation would be expressible as a polynomial-size depth-3
powering formula (just writing it as a sum of monomials would be an example of such a
formula). ◀
C.3 Pigeonhole principle
▶Theorem 20. There is a (Symn+1×Symn)-sym-IPSLINrefutation ofFPHP(n+ 1,n)of
sizeO(3n·n)over the field Q.
Fix a number n∈Nof holes. Recall that for every set D⊆[n+ 1]of pigeons, we define
the polynomial
BD(⃗ x):=/summationdisplay
γ:D◁arrowhookleft→[n]/productdisplay
i∈Dxiγ(i).
This can be seen as the sum over all injective mappings of the pigeons in Dto holes in
[n]. To prove Theorem 20, we first describe a way to compute the polynomials BDfor all
D⊆[n+ 1], and then show how to combine the BDto obtain a refutation of FPHP(n+ 1,n).
For the computation of BD, we also need the following polynomial for every D⊆[n+ 1]
and everyj∈[n]:
XD∝⇕⊣√∫⊔≀→j(⃗ x) :=/productdisplay
i∈Dxij.
This is obviously computable with a single multiplication gate. The resulting circuit is
Stab (D∪{j})-symmetric, i.e. it is symmetric under every π∈Symn+1×Symnthat fixes
the holej, and the pigeons Dsetwise. The circuits for BDare defined recursively. For
|D|= 1, it is obvious how to compute BDwith a single summation gate. For D=∅, we let
BD= 1. Both require just a single arithmetic gate. We now inductively construct circuits
CDforBD, for|D|>1, assuming the circuits CDfor all smaller D, and the circuits for
all polynomials XD∝⇕⊣√∫⊔≀→jfor allD⊆Iandj∈Jare available. The circuit CDperforms the
following computations:
CD:=|D|/summationdisplay
k=1(−1)k−1·k!
|D|·/parenleftig/summationdisplay
Dk⊆D
|Dk|=k/parenleftig/summationdisplay
j∈[n]XDk∝⇕⊣√∫⊔≀→j/parenrightig
·BD\Dk/parenrightig
.
ForBD\DkandXDk∝⇕⊣√∫⊔≀→j, we use the circuits that are already constructed.
▶Lemma 34. For everyD⊆[n+ 1],CD(⃗ x) =BD.
Proof.If|D|≤1, the construction of CDis non-recursive and ensures this. So consider a D
with|D|>1. By induction on m, we prove for every 1≤m<|D|:
m/summationdisplay
k=1(−1)k−1·k!
|D|·/parenleftig/summationdisplay
Dk⊆D
|Dk|=k/parenleftig/summationdisplay
j∈[n]XDk∝⇕⊣√∫⊔≀→j/parenrightig
·BD\Dk/parenrightig
=BD+ (−1)m−1·(m+ 1)!
|D|·/parenleftig/summationdisplay
Dm+1⊆D
|Dm+1|=m+1/parenleftig/summationdisplay
j∈[n]XDm+1∝⇕⊣√∫⊔≀→j/parenrightig
·B\j
D\Dm+1/parenrightig
(⋆)
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:33
Here,B\j
D\Dm+1denotes the sum over all monomials mthat encode a local bijection whose
domain isD\Dm+1and whose image is a subset of [n]\{j}.
Form= 1, the expression computes for every pigeon i∈Dand every hole j∈[n]the
polynomial BD\{i}·xij. Every monomial in BDis computed|D|many times in this way (as
the lift of each of its degree- (|D|−1)submonomials). Thus, the factor1
|D|ensures that we
get exactly BD. In addition to that, all degree- |D|monomials describing a mapping that
puts two pigeons in the same hole and is bijective everywhere else are computed. Each of
these is obtained in exactly two distinct ways: Let mbe a degree-|D|monomial involving
the product xijxi′j, and coding a local bijection between |D|−2other pigeons and holes.
Thenmappears in the summand with Dk={i}and also in the summand with Dk={i′}.
So(⋆)is true form= 1.
To prove (⋆)form+ 1, we consider the value of the summand for k=m+ 1. This is
(−1)m+1−1·(m+ 1)!
|D|·/parenleftig/summationdisplay
Dm+1⊆D
|Dm+1|=m+1/parenleftig/summationdisplay
j∈[n]XDm+1∝⇕⊣√∫⊔≀→j/parenrightig
·BD\Dm+1/parenrightig
=(−1)m·(m+ 1)!
|D|·/parenleftig/summationdisplay
Dm+1⊆D
|Dm+1|=m+1/parenleftig/summationdisplay
j∈[n]XDm+1∝⇕⊣√∫⊔≀→j/parenrightig
·B\j
D\Dm+1/parenrightig
+ (−1)m·(m+ 2)·(m+ 1)!
|D|·/parenleftig/summationdisplay
Dm+2⊆D
|Dm+2|=m+2/parenleftig/summationdisplay
j∈[n]XDm+2∝⇕⊣√∫⊔≀→j/parenrightig
·B\j
D\Dm+2/parenrightig
The second line exactly cancels the expression we get from the inductive hypothesis for m,
except forBD. The third line gives us (⋆)form+ 1, together with BDthat remains from
the inductive hypothesis. The equality stated above holds because in
/summationdisplay
Dm+1⊆D
|Dm+1|=m+1/parenleftig/summationdisplay
j∈[n]XDm+1∝⇕⊣√∫⊔≀→j/parenrightig
·BD\Dm+1/parenrightig
,
every degree-|D|monomial that puts m+ 1many pigeons in the same hole jand codes
a bijection everywhere else appears exactly once. In addition to this, we also get every
monomial that puts m+ 2pigeons in the same hole jand is bijective everywhere else; each
such monomial is obtained in m+ 2different ways. This proves (⋆)for everym<|D|. In
total, we get
|D|−1/summationdisplay
k=1(−1)k−1·k!
|D|·/parenleftig/summationdisplay
Dk⊆D
|Dk|=k/parenleftig/summationdisplay
j∈[n]XDk∝⇕⊣√∫⊔≀→j/parenrightig
·BD\Dk/parenrightig
=BD+ (−1)|D|−2·|D|!
|D|·/parenleftig/summationdisplay
j∈[n]XD∝⇕⊣√∫⊔≀→j/parenrightig
The summand for k=|D|inCDexactly cancels (−1)|D|−2·|D|!
|D|·/parenleftig/summationtext
j∈[n]XD∝⇕⊣√∫⊔≀→j/parenrightig
, so we
obtainBDin the end. ◀
▶Lemma 35. There exists a circuit Cof sizeO(3n)which is (Symn+1×Symn)-symmetric
and computes all polynomials BD(⃗ x)in the sense that for every D⊆[n+ 1], there is a gate
gDinCwhose output is BD(⃗ x).
XX:34
Proof.LetCbe the circuit CDas defined above, for D= [n+ 1]. This contains a
subcircuitCDfor everyD⊆[n+ 1]as a subcircuit. To estimate its total size, note
that for every D⊆[n+ 1], the size of CDisO(2|D|)if we only count the gates which do
not belong to the subcircuits for the polynomials BD\Dkappearing in the definition of CD.
Thus in total, in order to compute all BDfor allD⊆[n+ 1], we need a circuit of size
2n·n+/summationtext
D⊆[n+1]2|D|≤O(3n). The 2n·ncomes from the XD∝⇕⊣√∫⊔≀→jfor allD⊆[n+ 1]and all
j∈[n]. For the symmetries, we observe that by definition, every CDisStab (D)-symmetric.
So the total circuit C=C[n+1]isStab ([n+ 1])-symmetric, and the setwise stabiliser of
[n+ 1]inSymn+1×SymnisSymn+1×Symnitself. ◀
Using the constructed CD, we can get a ⃗ y-linear refutation for FPHP(n+ 1,n)as follows.
Define
α(n,k):=1/parenleftbign
k/parenrightbig
·(n−k)
qi(⃗ x):=−1
n+ 1+n/summationdisplay
k=1/summationdisplay
D⊆[n+1]\{i}
|D|=k/parenleftig
−α(n+ 1,k)·BD/parenrightig
for everyi∈[n+ 1]
q(i,i′,j)(⃗ x):=/summationdisplay
D⊆I\{i,i′}2α(n+ 1,|D|−1)·B\j
D for everyj∈[n],i̸=i′∈[n+ 1]
As before,B\j
Ddenotes the sum over all monomials encoding a local bijection from pigeons
Dto a subset of [n]\{j}.
▶Lemma 36.
C(⃗ x,⃗ y) :=/summationdisplay
i∈[n+1]yi·qi(⃗ x) +/summationdisplay
i̸=i′∈[n+1]
j∈[n]y(i,i′,j)·q(i,i′,j)(⃗ x)
is a⃗ y-linear refutation of FPHP(n+ 1,n).
Proof.We have to prove C(⃗ x,FPHP(n+ 1,n)) = 1. We start by computing the first sum:
/summationdisplay
i∈[n+1]/parenleftig/summationdisplay
j∈[n]xij−1/parenrightig
·qi(⃗ x)
= 1 +n+1/summationdisplay
k=1/parenleftig/summationdisplay
D⊆[n+1]
|D|=k/parenleftig
BD·(k·(−α(n+ 1,k−1)) + (n+ 1−k)·α(n+ 1,k))
+/summationdisplay
D2⊆D
|D2|=2/summationdisplay
j∈[n]−2·α(n+ 1,k−1)·XD2∝⇕⊣√∫⊔≀→j·B\j
D\D2/parenrightig/parenrightig
.
In words: Every degree- kmonomialmencoding a local bijection is obtained in kdifferent
ways as the product of a variable xijwith a degree- (k−1)submonomial of m. Moreover, mis
obtained in (n+ 1−k)many ways in the product (−1)·B\i
D, for everyithat does not appear
inm. In addition to these monomials, there appear all monomials encoding a local “almost-
bijection”, whereonehole jisoccupiedbytwopigeons i,i′. Eachofthesemonomialsiscreated
in two ways: Once it appears in xij·B\i
D, and another time in xi′j·B\i′
D. Now a straightforward
calculation shows that the coefficient (k·(−α(n+ 1,k−1)) + (n+ 1−k)·α(n+ 1,k))ofBD
is in fact zero. The remaining expression
/summationdisplay
D⊆I/summationdisplay
D2⊆D
|D2|=2/summationdisplay
j∈[n]−2·α(n+ 1,|D|−1)·XD2∝⇕⊣√∫⊔≀→j·B\j
D\D2
A. Dawar, E. Grädel, L. Kullmann, B. Pago XX:35
is exactly cancelled by/summationtext
i̸=i′∈[n+1]
j∈[n]xijxi′j·q(i,i′,j)(⃗ x). Hence,C(⃗ x,FPHP(n+ 1,n)) = 1.◀
▶Lemma 37. For everyi∈[n+ 1],qi(⃗ x)can be computed by a Stab (i)-symmetric circuit of
sizeO(3n). For every j∈[n],i̸=i′∈[n+ 1],q(i,i′,j)(⃗ x)can be computed by a Stab (i,i′,j)-
symmetric circuit of size O(3n).
Proof.To compute qi, we make use of the (Symn+1×Sym[n])-symmetric circuit from
Lemma 35, which contains a gate gDfor everyD⊆[n+ 1], evaluating to BD. Sinceqionly
requires the polynomials BDfor everyD⊆[n+ 1]\{i}, only the outputs of those gates gD
are used, and the resulting circuit is symmetric under Stab (i)≤Symn+1×Symn. The
additional gates needed to compute qiare only linearly many that multiply the BDwith the
appropriate coefficients −α(n+ 1,|D|). In total, the circuit size is in O(3n).
Computing q(i,i′,j)works similarly. The main difference is that in the circuit from Lemma
35, we set every input variable mentioning hole jto zero. This allows us to compute the
polynomials B\j
Dneeded forq(i,i′,j). ◀
Theorem 20 now follows. The total refutation size O(n·3n)is due to the fact that we
needn+ 1versions of the circuit from Lemma 35: The original one, and one version for each
j∈[n]that is set to zero in the proof of Lemma 37. Moreover, it is easy to check that the
entire certificate C(⃗ x,⃗ y)is(Symn+1×Symn)-symmetric, and so is the refutation we obtain
by putting together the circuits from Lemma 37.